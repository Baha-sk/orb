// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/aries-framework-go-ext/component/storage/mongodb"
	"github.com/hyperledger/aries-framework-go/spi/storage"
)

type MongoDBIterator struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	KeyStub        func() (string, error)
	keyMutex       sync.RWMutex
	keyArgsForCall []struct {
	}
	keyReturns struct {
		result1 string
		result2 error
	}
	keyReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	NextStub        func() (bool, error)
	nextMutex       sync.RWMutex
	nextArgsForCall []struct {
	}
	nextReturns struct {
		result1 bool
		result2 error
	}
	nextReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	TagsStub        func() ([]storage.Tag, error)
	tagsMutex       sync.RWMutex
	tagsArgsForCall []struct {
	}
	tagsReturns struct {
		result1 []storage.Tag
		result2 error
	}
	tagsReturnsOnCall map[int]struct {
		result1 []storage.Tag
		result2 error
	}
	TotalItemsStub        func() (int, error)
	totalItemsMutex       sync.RWMutex
	totalItemsArgsForCall []struct {
	}
	totalItemsReturns struct {
		result1 int
		result2 error
	}
	totalItemsReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	ValueStub        func() ([]byte, error)
	valueMutex       sync.RWMutex
	valueArgsForCall []struct {
	}
	valueReturns struct {
		result1 []byte
		result2 error
	}
	valueReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	ValueAsRawMapStub        func() (map[string]interface{}, error)
	valueAsRawMapMutex       sync.RWMutex
	valueAsRawMapArgsForCall []struct {
	}
	valueAsRawMapReturns struct {
		result1 map[string]interface{}
		result2 error
	}
	valueAsRawMapReturnsOnCall map[int]struct {
		result1 map[string]interface{}
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *MongoDBIterator) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *MongoDBIterator) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *MongoDBIterator) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *MongoDBIterator) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *MongoDBIterator) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *MongoDBIterator) Key() (string, error) {
	fake.keyMutex.Lock()
	ret, specificReturn := fake.keyReturnsOnCall[len(fake.keyArgsForCall)]
	fake.keyArgsForCall = append(fake.keyArgsForCall, struct {
	}{})
	stub := fake.KeyStub
	fakeReturns := fake.keyReturns
	fake.recordInvocation("Key", []interface{}{})
	fake.keyMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *MongoDBIterator) KeyCallCount() int {
	fake.keyMutex.RLock()
	defer fake.keyMutex.RUnlock()
	return len(fake.keyArgsForCall)
}

func (fake *MongoDBIterator) KeyCalls(stub func() (string, error)) {
	fake.keyMutex.Lock()
	defer fake.keyMutex.Unlock()
	fake.KeyStub = stub
}

func (fake *MongoDBIterator) KeyReturns(result1 string, result2 error) {
	fake.keyMutex.Lock()
	defer fake.keyMutex.Unlock()
	fake.KeyStub = nil
	fake.keyReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *MongoDBIterator) KeyReturnsOnCall(i int, result1 string, result2 error) {
	fake.keyMutex.Lock()
	defer fake.keyMutex.Unlock()
	fake.KeyStub = nil
	if fake.keyReturnsOnCall == nil {
		fake.keyReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.keyReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *MongoDBIterator) Next() (bool, error) {
	fake.nextMutex.Lock()
	ret, specificReturn := fake.nextReturnsOnCall[len(fake.nextArgsForCall)]
	fake.nextArgsForCall = append(fake.nextArgsForCall, struct {
	}{})
	stub := fake.NextStub
	fakeReturns := fake.nextReturns
	fake.recordInvocation("Next", []interface{}{})
	fake.nextMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *MongoDBIterator) NextCallCount() int {
	fake.nextMutex.RLock()
	defer fake.nextMutex.RUnlock()
	return len(fake.nextArgsForCall)
}

func (fake *MongoDBIterator) NextCalls(stub func() (bool, error)) {
	fake.nextMutex.Lock()
	defer fake.nextMutex.Unlock()
	fake.NextStub = stub
}

func (fake *MongoDBIterator) NextReturns(result1 bool, result2 error) {
	fake.nextMutex.Lock()
	defer fake.nextMutex.Unlock()
	fake.NextStub = nil
	fake.nextReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *MongoDBIterator) NextReturnsOnCall(i int, result1 bool, result2 error) {
	fake.nextMutex.Lock()
	defer fake.nextMutex.Unlock()
	fake.NextStub = nil
	if fake.nextReturnsOnCall == nil {
		fake.nextReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.nextReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *MongoDBIterator) Tags() ([]storage.Tag, error) {
	fake.tagsMutex.Lock()
	ret, specificReturn := fake.tagsReturnsOnCall[len(fake.tagsArgsForCall)]
	fake.tagsArgsForCall = append(fake.tagsArgsForCall, struct {
	}{})
	stub := fake.TagsStub
	fakeReturns := fake.tagsReturns
	fake.recordInvocation("Tags", []interface{}{})
	fake.tagsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *MongoDBIterator) TagsCallCount() int {
	fake.tagsMutex.RLock()
	defer fake.tagsMutex.RUnlock()
	return len(fake.tagsArgsForCall)
}

func (fake *MongoDBIterator) TagsCalls(stub func() ([]storage.Tag, error)) {
	fake.tagsMutex.Lock()
	defer fake.tagsMutex.Unlock()
	fake.TagsStub = stub
}

func (fake *MongoDBIterator) TagsReturns(result1 []storage.Tag, result2 error) {
	fake.tagsMutex.Lock()
	defer fake.tagsMutex.Unlock()
	fake.TagsStub = nil
	fake.tagsReturns = struct {
		result1 []storage.Tag
		result2 error
	}{result1, result2}
}

func (fake *MongoDBIterator) TagsReturnsOnCall(i int, result1 []storage.Tag, result2 error) {
	fake.tagsMutex.Lock()
	defer fake.tagsMutex.Unlock()
	fake.TagsStub = nil
	if fake.tagsReturnsOnCall == nil {
		fake.tagsReturnsOnCall = make(map[int]struct {
			result1 []storage.Tag
			result2 error
		})
	}
	fake.tagsReturnsOnCall[i] = struct {
		result1 []storage.Tag
		result2 error
	}{result1, result2}
}

func (fake *MongoDBIterator) TotalItems() (int, error) {
	fake.totalItemsMutex.Lock()
	ret, specificReturn := fake.totalItemsReturnsOnCall[len(fake.totalItemsArgsForCall)]
	fake.totalItemsArgsForCall = append(fake.totalItemsArgsForCall, struct {
	}{})
	stub := fake.TotalItemsStub
	fakeReturns := fake.totalItemsReturns
	fake.recordInvocation("TotalItems", []interface{}{})
	fake.totalItemsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *MongoDBIterator) TotalItemsCallCount() int {
	fake.totalItemsMutex.RLock()
	defer fake.totalItemsMutex.RUnlock()
	return len(fake.totalItemsArgsForCall)
}

func (fake *MongoDBIterator) TotalItemsCalls(stub func() (int, error)) {
	fake.totalItemsMutex.Lock()
	defer fake.totalItemsMutex.Unlock()
	fake.TotalItemsStub = stub
}

func (fake *MongoDBIterator) TotalItemsReturns(result1 int, result2 error) {
	fake.totalItemsMutex.Lock()
	defer fake.totalItemsMutex.Unlock()
	fake.TotalItemsStub = nil
	fake.totalItemsReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *MongoDBIterator) TotalItemsReturnsOnCall(i int, result1 int, result2 error) {
	fake.totalItemsMutex.Lock()
	defer fake.totalItemsMutex.Unlock()
	fake.TotalItemsStub = nil
	if fake.totalItemsReturnsOnCall == nil {
		fake.totalItemsReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.totalItemsReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *MongoDBIterator) Value() ([]byte, error) {
	fake.valueMutex.Lock()
	ret, specificReturn := fake.valueReturnsOnCall[len(fake.valueArgsForCall)]
	fake.valueArgsForCall = append(fake.valueArgsForCall, struct {
	}{})
	stub := fake.ValueStub
	fakeReturns := fake.valueReturns
	fake.recordInvocation("Value", []interface{}{})
	fake.valueMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *MongoDBIterator) ValueCallCount() int {
	fake.valueMutex.RLock()
	defer fake.valueMutex.RUnlock()
	return len(fake.valueArgsForCall)
}

func (fake *MongoDBIterator) ValueCalls(stub func() ([]byte, error)) {
	fake.valueMutex.Lock()
	defer fake.valueMutex.Unlock()
	fake.ValueStub = stub
}

func (fake *MongoDBIterator) ValueReturns(result1 []byte, result2 error) {
	fake.valueMutex.Lock()
	defer fake.valueMutex.Unlock()
	fake.ValueStub = nil
	fake.valueReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *MongoDBIterator) ValueReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.valueMutex.Lock()
	defer fake.valueMutex.Unlock()
	fake.ValueStub = nil
	if fake.valueReturnsOnCall == nil {
		fake.valueReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.valueReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *MongoDBIterator) ValueAsRawMap() (map[string]interface{}, error) {
	fake.valueAsRawMapMutex.Lock()
	ret, specificReturn := fake.valueAsRawMapReturnsOnCall[len(fake.valueAsRawMapArgsForCall)]
	fake.valueAsRawMapArgsForCall = append(fake.valueAsRawMapArgsForCall, struct {
	}{})
	stub := fake.ValueAsRawMapStub
	fakeReturns := fake.valueAsRawMapReturns
	fake.recordInvocation("ValueAsRawMap", []interface{}{})
	fake.valueAsRawMapMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *MongoDBIterator) ValueAsRawMapCallCount() int {
	fake.valueAsRawMapMutex.RLock()
	defer fake.valueAsRawMapMutex.RUnlock()
	return len(fake.valueAsRawMapArgsForCall)
}

func (fake *MongoDBIterator) ValueAsRawMapCalls(stub func() (map[string]interface{}, error)) {
	fake.valueAsRawMapMutex.Lock()
	defer fake.valueAsRawMapMutex.Unlock()
	fake.ValueAsRawMapStub = stub
}

func (fake *MongoDBIterator) ValueAsRawMapReturns(result1 map[string]interface{}, result2 error) {
	fake.valueAsRawMapMutex.Lock()
	defer fake.valueAsRawMapMutex.Unlock()
	fake.ValueAsRawMapStub = nil
	fake.valueAsRawMapReturns = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *MongoDBIterator) ValueAsRawMapReturnsOnCall(i int, result1 map[string]interface{}, result2 error) {
	fake.valueAsRawMapMutex.Lock()
	defer fake.valueAsRawMapMutex.Unlock()
	fake.ValueAsRawMapStub = nil
	if fake.valueAsRawMapReturnsOnCall == nil {
		fake.valueAsRawMapReturnsOnCall = make(map[int]struct {
			result1 map[string]interface{}
			result2 error
		})
	}
	fake.valueAsRawMapReturnsOnCall[i] = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *MongoDBIterator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.keyMutex.RLock()
	defer fake.keyMutex.RUnlock()
	fake.nextMutex.RLock()
	defer fake.nextMutex.RUnlock()
	fake.tagsMutex.RLock()
	defer fake.tagsMutex.RUnlock()
	fake.totalItemsMutex.RLock()
	defer fake.totalItemsMutex.RUnlock()
	fake.valueMutex.RLock()
	defer fake.valueMutex.RUnlock()
	fake.valueAsRawMapMutex.RLock()
	defer fake.valueAsRawMapMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *MongoDBIterator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ mongodb.Iterator = new(MongoDBIterator)
