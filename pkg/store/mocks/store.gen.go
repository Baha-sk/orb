// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/aries-framework-go/spi/storage"
)

type Store struct {
	BatchStub        func([]storage.Operation) error
	batchMutex       sync.RWMutex
	batchArgsForCall []struct {
		arg1 []storage.Operation
	}
	batchReturns struct {
		result1 error
	}
	batchReturnsOnCall map[int]struct {
		result1 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteStub        func(string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	FlushStub        func() error
	flushMutex       sync.RWMutex
	flushArgsForCall []struct {
	}
	flushReturns struct {
		result1 error
	}
	flushReturnsOnCall map[int]struct {
		result1 error
	}
	GetStub        func(string) ([]byte, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 string
	}
	getReturns struct {
		result1 []byte
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	GetBulkStub        func(...string) ([][]byte, error)
	getBulkMutex       sync.RWMutex
	getBulkArgsForCall []struct {
		arg1 []string
	}
	getBulkReturns struct {
		result1 [][]byte
		result2 error
	}
	getBulkReturnsOnCall map[int]struct {
		result1 [][]byte
		result2 error
	}
	GetTagsStub        func(string) ([]storage.Tag, error)
	getTagsMutex       sync.RWMutex
	getTagsArgsForCall []struct {
		arg1 string
	}
	getTagsReturns struct {
		result1 []storage.Tag
		result2 error
	}
	getTagsReturnsOnCall map[int]struct {
		result1 []storage.Tag
		result2 error
	}
	PutStub        func(string, []byte, ...storage.Tag) error
	putMutex       sync.RWMutex
	putArgsForCall []struct {
		arg1 string
		arg2 []byte
		arg3 []storage.Tag
	}
	putReturns struct {
		result1 error
	}
	putReturnsOnCall map[int]struct {
		result1 error
	}
	QueryStub        func(string, ...storage.QueryOption) (storage.Iterator, error)
	queryMutex       sync.RWMutex
	queryArgsForCall []struct {
		arg1 string
		arg2 []storage.QueryOption
	}
	queryReturns struct {
		result1 storage.Iterator
		result2 error
	}
	queryReturnsOnCall map[int]struct {
		result1 storage.Iterator
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Store) Batch(arg1 []storage.Operation) error {
	var arg1Copy []storage.Operation
	if arg1 != nil {
		arg1Copy = make([]storage.Operation, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.batchMutex.Lock()
	ret, specificReturn := fake.batchReturnsOnCall[len(fake.batchArgsForCall)]
	fake.batchArgsForCall = append(fake.batchArgsForCall, struct {
		arg1 []storage.Operation
	}{arg1Copy})
	fake.recordInvocation("Batch", []interface{}{arg1Copy})
	fake.batchMutex.Unlock()
	if fake.BatchStub != nil {
		return fake.BatchStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.batchReturns
	return fakeReturns.result1
}

func (fake *Store) BatchCallCount() int {
	fake.batchMutex.RLock()
	defer fake.batchMutex.RUnlock()
	return len(fake.batchArgsForCall)
}

func (fake *Store) BatchCalls(stub func([]storage.Operation) error) {
	fake.batchMutex.Lock()
	defer fake.batchMutex.Unlock()
	fake.BatchStub = stub
}

func (fake *Store) BatchArgsForCall(i int) []storage.Operation {
	fake.batchMutex.RLock()
	defer fake.batchMutex.RUnlock()
	argsForCall := fake.batchArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Store) BatchReturns(result1 error) {
	fake.batchMutex.Lock()
	defer fake.batchMutex.Unlock()
	fake.BatchStub = nil
	fake.batchReturns = struct {
		result1 error
	}{result1}
}

func (fake *Store) BatchReturnsOnCall(i int, result1 error) {
	fake.batchMutex.Lock()
	defer fake.batchMutex.Unlock()
	fake.BatchStub = nil
	if fake.batchReturnsOnCall == nil {
		fake.batchReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.batchReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Store) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.closeReturns
	return fakeReturns.result1
}

func (fake *Store) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *Store) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *Store) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *Store) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Store) Delete(arg1 string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Delete", []interface{}{arg1})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteReturns
	return fakeReturns.result1
}

func (fake *Store) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *Store) DeleteCalls(stub func(string) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *Store) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Store) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *Store) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Store) Flush() error {
	fake.flushMutex.Lock()
	ret, specificReturn := fake.flushReturnsOnCall[len(fake.flushArgsForCall)]
	fake.flushArgsForCall = append(fake.flushArgsForCall, struct {
	}{})
	fake.recordInvocation("Flush", []interface{}{})
	fake.flushMutex.Unlock()
	if fake.FlushStub != nil {
		return fake.FlushStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.flushReturns
	return fakeReturns.result1
}

func (fake *Store) FlushCallCount() int {
	fake.flushMutex.RLock()
	defer fake.flushMutex.RUnlock()
	return len(fake.flushArgsForCall)
}

func (fake *Store) FlushCalls(stub func() error) {
	fake.flushMutex.Lock()
	defer fake.flushMutex.Unlock()
	fake.FlushStub = stub
}

func (fake *Store) FlushReturns(result1 error) {
	fake.flushMutex.Lock()
	defer fake.flushMutex.Unlock()
	fake.FlushStub = nil
	fake.flushReturns = struct {
		result1 error
	}{result1}
}

func (fake *Store) FlushReturnsOnCall(i int, result1 error) {
	fake.flushMutex.Lock()
	defer fake.flushMutex.Unlock()
	fake.FlushStub = nil
	if fake.flushReturnsOnCall == nil {
		fake.flushReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.flushReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Store) Get(arg1 string) ([]byte, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Get", []interface{}{arg1})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Store) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *Store) GetCalls(stub func(string) ([]byte, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *Store) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Store) GetReturns(result1 []byte, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *Store) GetReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *Store) GetBulk(arg1 ...string) ([][]byte, error) {
	fake.getBulkMutex.Lock()
	ret, specificReturn := fake.getBulkReturnsOnCall[len(fake.getBulkArgsForCall)]
	fake.getBulkArgsForCall = append(fake.getBulkArgsForCall, struct {
		arg1 []string
	}{arg1})
	fake.recordInvocation("GetBulk", []interface{}{arg1})
	fake.getBulkMutex.Unlock()
	if fake.GetBulkStub != nil {
		return fake.GetBulkStub(arg1...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBulkReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Store) GetBulkCallCount() int {
	fake.getBulkMutex.RLock()
	defer fake.getBulkMutex.RUnlock()
	return len(fake.getBulkArgsForCall)
}

func (fake *Store) GetBulkCalls(stub func(...string) ([][]byte, error)) {
	fake.getBulkMutex.Lock()
	defer fake.getBulkMutex.Unlock()
	fake.GetBulkStub = stub
}

func (fake *Store) GetBulkArgsForCall(i int) []string {
	fake.getBulkMutex.RLock()
	defer fake.getBulkMutex.RUnlock()
	argsForCall := fake.getBulkArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Store) GetBulkReturns(result1 [][]byte, result2 error) {
	fake.getBulkMutex.Lock()
	defer fake.getBulkMutex.Unlock()
	fake.GetBulkStub = nil
	fake.getBulkReturns = struct {
		result1 [][]byte
		result2 error
	}{result1, result2}
}

func (fake *Store) GetBulkReturnsOnCall(i int, result1 [][]byte, result2 error) {
	fake.getBulkMutex.Lock()
	defer fake.getBulkMutex.Unlock()
	fake.GetBulkStub = nil
	if fake.getBulkReturnsOnCall == nil {
		fake.getBulkReturnsOnCall = make(map[int]struct {
			result1 [][]byte
			result2 error
		})
	}
	fake.getBulkReturnsOnCall[i] = struct {
		result1 [][]byte
		result2 error
	}{result1, result2}
}

func (fake *Store) GetTags(arg1 string) ([]storage.Tag, error) {
	fake.getTagsMutex.Lock()
	ret, specificReturn := fake.getTagsReturnsOnCall[len(fake.getTagsArgsForCall)]
	fake.getTagsArgsForCall = append(fake.getTagsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetTags", []interface{}{arg1})
	fake.getTagsMutex.Unlock()
	if fake.GetTagsStub != nil {
		return fake.GetTagsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getTagsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Store) GetTagsCallCount() int {
	fake.getTagsMutex.RLock()
	defer fake.getTagsMutex.RUnlock()
	return len(fake.getTagsArgsForCall)
}

func (fake *Store) GetTagsCalls(stub func(string) ([]storage.Tag, error)) {
	fake.getTagsMutex.Lock()
	defer fake.getTagsMutex.Unlock()
	fake.GetTagsStub = stub
}

func (fake *Store) GetTagsArgsForCall(i int) string {
	fake.getTagsMutex.RLock()
	defer fake.getTagsMutex.RUnlock()
	argsForCall := fake.getTagsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Store) GetTagsReturns(result1 []storage.Tag, result2 error) {
	fake.getTagsMutex.Lock()
	defer fake.getTagsMutex.Unlock()
	fake.GetTagsStub = nil
	fake.getTagsReturns = struct {
		result1 []storage.Tag
		result2 error
	}{result1, result2}
}

func (fake *Store) GetTagsReturnsOnCall(i int, result1 []storage.Tag, result2 error) {
	fake.getTagsMutex.Lock()
	defer fake.getTagsMutex.Unlock()
	fake.GetTagsStub = nil
	if fake.getTagsReturnsOnCall == nil {
		fake.getTagsReturnsOnCall = make(map[int]struct {
			result1 []storage.Tag
			result2 error
		})
	}
	fake.getTagsReturnsOnCall[i] = struct {
		result1 []storage.Tag
		result2 error
	}{result1, result2}
}

func (fake *Store) Put(arg1 string, arg2 []byte, arg3 ...storage.Tag) error {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.putMutex.Lock()
	ret, specificReturn := fake.putReturnsOnCall[len(fake.putArgsForCall)]
	fake.putArgsForCall = append(fake.putArgsForCall, struct {
		arg1 string
		arg2 []byte
		arg3 []storage.Tag
	}{arg1, arg2Copy, arg3})
	fake.recordInvocation("Put", []interface{}{arg1, arg2Copy, arg3})
	fake.putMutex.Unlock()
	if fake.PutStub != nil {
		return fake.PutStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.putReturns
	return fakeReturns.result1
}

func (fake *Store) PutCallCount() int {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	return len(fake.putArgsForCall)
}

func (fake *Store) PutCalls(stub func(string, []byte, ...storage.Tag) error) {
	fake.putMutex.Lock()
	defer fake.putMutex.Unlock()
	fake.PutStub = stub
}

func (fake *Store) PutArgsForCall(i int) (string, []byte, []storage.Tag) {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	argsForCall := fake.putArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *Store) PutReturns(result1 error) {
	fake.putMutex.Lock()
	defer fake.putMutex.Unlock()
	fake.PutStub = nil
	fake.putReturns = struct {
		result1 error
	}{result1}
}

func (fake *Store) PutReturnsOnCall(i int, result1 error) {
	fake.putMutex.Lock()
	defer fake.putMutex.Unlock()
	fake.PutStub = nil
	if fake.putReturnsOnCall == nil {
		fake.putReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.putReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Store) Query(arg1 string, arg2 ...storage.QueryOption) (storage.Iterator, error) {
	fake.queryMutex.Lock()
	ret, specificReturn := fake.queryReturnsOnCall[len(fake.queryArgsForCall)]
	fake.queryArgsForCall = append(fake.queryArgsForCall, struct {
		arg1 string
		arg2 []storage.QueryOption
	}{arg1, arg2})
	fake.recordInvocation("Query", []interface{}{arg1, arg2})
	fake.queryMutex.Unlock()
	if fake.QueryStub != nil {
		return fake.QueryStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.queryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Store) QueryCallCount() int {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	return len(fake.queryArgsForCall)
}

func (fake *Store) QueryCalls(stub func(string, ...storage.QueryOption) (storage.Iterator, error)) {
	fake.queryMutex.Lock()
	defer fake.queryMutex.Unlock()
	fake.QueryStub = stub
}

func (fake *Store) QueryArgsForCall(i int) (string, []storage.QueryOption) {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	argsForCall := fake.queryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Store) QueryReturns(result1 storage.Iterator, result2 error) {
	fake.queryMutex.Lock()
	defer fake.queryMutex.Unlock()
	fake.QueryStub = nil
	fake.queryReturns = struct {
		result1 storage.Iterator
		result2 error
	}{result1, result2}
}

func (fake *Store) QueryReturnsOnCall(i int, result1 storage.Iterator, result2 error) {
	fake.queryMutex.Lock()
	defer fake.queryMutex.Unlock()
	fake.QueryStub = nil
	if fake.queryReturnsOnCall == nil {
		fake.queryReturnsOnCall = make(map[int]struct {
			result1 storage.Iterator
			result2 error
		})
	}
	fake.queryReturnsOnCall[i] = struct {
		result1 storage.Iterator
		result2 error
	}{result1, result2}
}

func (fake *Store) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.batchMutex.RLock()
	defer fake.batchMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.flushMutex.RLock()
	defer fake.flushMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.getBulkMutex.RLock()
	defer fake.getBulkMutex.RUnlock()
	fake.getTagsMutex.RLock()
	defer fake.getTagsMutex.RUnlock()
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Store) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.Store = new(Store)
