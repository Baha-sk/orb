// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/aries-framework-go/spi/storage"
	"go.mongodb.org/mongo-driver/mongo"
)

type MongoDBProvider struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	CreateCustomIndexesStub        func(string, ...mongo.IndexModel) error
	createCustomIndexesMutex       sync.RWMutex
	createCustomIndexesArgsForCall []struct {
		arg1 string
		arg2 []mongo.IndexModel
	}
	createCustomIndexesReturns struct {
		result1 error
	}
	createCustomIndexesReturnsOnCall map[int]struct {
		result1 error
	}
	GetOpenStoresStub        func() []storage.Store
	getOpenStoresMutex       sync.RWMutex
	getOpenStoresArgsForCall []struct {
	}
	getOpenStoresReturns struct {
		result1 []storage.Store
	}
	getOpenStoresReturnsOnCall map[int]struct {
		result1 []storage.Store
	}
	GetStoreConfigStub        func(string) (storage.StoreConfiguration, error)
	getStoreConfigMutex       sync.RWMutex
	getStoreConfigArgsForCall []struct {
		arg1 string
	}
	getStoreConfigReturns struct {
		result1 storage.StoreConfiguration
		result2 error
	}
	getStoreConfigReturnsOnCall map[int]struct {
		result1 storage.StoreConfiguration
		result2 error
	}
	OpenStoreStub        func(string) (storage.Store, error)
	openStoreMutex       sync.RWMutex
	openStoreArgsForCall []struct {
		arg1 string
	}
	openStoreReturns struct {
		result1 storage.Store
		result2 error
	}
	openStoreReturnsOnCall map[int]struct {
		result1 storage.Store
		result2 error
	}
	PingStub        func() error
	pingMutex       sync.RWMutex
	pingArgsForCall []struct {
	}
	pingReturns struct {
		result1 error
	}
	pingReturnsOnCall map[int]struct {
		result1 error
	}
	SetStoreConfigStub        func(string, storage.StoreConfiguration) error
	setStoreConfigMutex       sync.RWMutex
	setStoreConfigArgsForCall []struct {
		arg1 string
		arg2 storage.StoreConfiguration
	}
	setStoreConfigReturns struct {
		result1 error
	}
	setStoreConfigReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *MongoDBProvider) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *MongoDBProvider) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *MongoDBProvider) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *MongoDBProvider) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *MongoDBProvider) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *MongoDBProvider) CreateCustomIndexes(arg1 string, arg2 ...mongo.IndexModel) error {
	fake.createCustomIndexesMutex.Lock()
	ret, specificReturn := fake.createCustomIndexesReturnsOnCall[len(fake.createCustomIndexesArgsForCall)]
	fake.createCustomIndexesArgsForCall = append(fake.createCustomIndexesArgsForCall, struct {
		arg1 string
		arg2 []mongo.IndexModel
	}{arg1, arg2})
	stub := fake.CreateCustomIndexesStub
	fakeReturns := fake.createCustomIndexesReturns
	fake.recordInvocation("CreateCustomIndexes", []interface{}{arg1, arg2})
	fake.createCustomIndexesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *MongoDBProvider) CreateCustomIndexesCallCount() int {
	fake.createCustomIndexesMutex.RLock()
	defer fake.createCustomIndexesMutex.RUnlock()
	return len(fake.createCustomIndexesArgsForCall)
}

func (fake *MongoDBProvider) CreateCustomIndexesCalls(stub func(string, ...mongo.IndexModel) error) {
	fake.createCustomIndexesMutex.Lock()
	defer fake.createCustomIndexesMutex.Unlock()
	fake.CreateCustomIndexesStub = stub
}

func (fake *MongoDBProvider) CreateCustomIndexesArgsForCall(i int) (string, []mongo.IndexModel) {
	fake.createCustomIndexesMutex.RLock()
	defer fake.createCustomIndexesMutex.RUnlock()
	argsForCall := fake.createCustomIndexesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *MongoDBProvider) CreateCustomIndexesReturns(result1 error) {
	fake.createCustomIndexesMutex.Lock()
	defer fake.createCustomIndexesMutex.Unlock()
	fake.CreateCustomIndexesStub = nil
	fake.createCustomIndexesReturns = struct {
		result1 error
	}{result1}
}

func (fake *MongoDBProvider) CreateCustomIndexesReturnsOnCall(i int, result1 error) {
	fake.createCustomIndexesMutex.Lock()
	defer fake.createCustomIndexesMutex.Unlock()
	fake.CreateCustomIndexesStub = nil
	if fake.createCustomIndexesReturnsOnCall == nil {
		fake.createCustomIndexesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createCustomIndexesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *MongoDBProvider) GetOpenStores() []storage.Store {
	fake.getOpenStoresMutex.Lock()
	ret, specificReturn := fake.getOpenStoresReturnsOnCall[len(fake.getOpenStoresArgsForCall)]
	fake.getOpenStoresArgsForCall = append(fake.getOpenStoresArgsForCall, struct {
	}{})
	stub := fake.GetOpenStoresStub
	fakeReturns := fake.getOpenStoresReturns
	fake.recordInvocation("GetOpenStores", []interface{}{})
	fake.getOpenStoresMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *MongoDBProvider) GetOpenStoresCallCount() int {
	fake.getOpenStoresMutex.RLock()
	defer fake.getOpenStoresMutex.RUnlock()
	return len(fake.getOpenStoresArgsForCall)
}

func (fake *MongoDBProvider) GetOpenStoresCalls(stub func() []storage.Store) {
	fake.getOpenStoresMutex.Lock()
	defer fake.getOpenStoresMutex.Unlock()
	fake.GetOpenStoresStub = stub
}

func (fake *MongoDBProvider) GetOpenStoresReturns(result1 []storage.Store) {
	fake.getOpenStoresMutex.Lock()
	defer fake.getOpenStoresMutex.Unlock()
	fake.GetOpenStoresStub = nil
	fake.getOpenStoresReturns = struct {
		result1 []storage.Store
	}{result1}
}

func (fake *MongoDBProvider) GetOpenStoresReturnsOnCall(i int, result1 []storage.Store) {
	fake.getOpenStoresMutex.Lock()
	defer fake.getOpenStoresMutex.Unlock()
	fake.GetOpenStoresStub = nil
	if fake.getOpenStoresReturnsOnCall == nil {
		fake.getOpenStoresReturnsOnCall = make(map[int]struct {
			result1 []storage.Store
		})
	}
	fake.getOpenStoresReturnsOnCall[i] = struct {
		result1 []storage.Store
	}{result1}
}

func (fake *MongoDBProvider) GetStoreConfig(arg1 string) (storage.StoreConfiguration, error) {
	fake.getStoreConfigMutex.Lock()
	ret, specificReturn := fake.getStoreConfigReturnsOnCall[len(fake.getStoreConfigArgsForCall)]
	fake.getStoreConfigArgsForCall = append(fake.getStoreConfigArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetStoreConfigStub
	fakeReturns := fake.getStoreConfigReturns
	fake.recordInvocation("GetStoreConfig", []interface{}{arg1})
	fake.getStoreConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *MongoDBProvider) GetStoreConfigCallCount() int {
	fake.getStoreConfigMutex.RLock()
	defer fake.getStoreConfigMutex.RUnlock()
	return len(fake.getStoreConfigArgsForCall)
}

func (fake *MongoDBProvider) GetStoreConfigCalls(stub func(string) (storage.StoreConfiguration, error)) {
	fake.getStoreConfigMutex.Lock()
	defer fake.getStoreConfigMutex.Unlock()
	fake.GetStoreConfigStub = stub
}

func (fake *MongoDBProvider) GetStoreConfigArgsForCall(i int) string {
	fake.getStoreConfigMutex.RLock()
	defer fake.getStoreConfigMutex.RUnlock()
	argsForCall := fake.getStoreConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *MongoDBProvider) GetStoreConfigReturns(result1 storage.StoreConfiguration, result2 error) {
	fake.getStoreConfigMutex.Lock()
	defer fake.getStoreConfigMutex.Unlock()
	fake.GetStoreConfigStub = nil
	fake.getStoreConfigReturns = struct {
		result1 storage.StoreConfiguration
		result2 error
	}{result1, result2}
}

func (fake *MongoDBProvider) GetStoreConfigReturnsOnCall(i int, result1 storage.StoreConfiguration, result2 error) {
	fake.getStoreConfigMutex.Lock()
	defer fake.getStoreConfigMutex.Unlock()
	fake.GetStoreConfigStub = nil
	if fake.getStoreConfigReturnsOnCall == nil {
		fake.getStoreConfigReturnsOnCall = make(map[int]struct {
			result1 storage.StoreConfiguration
			result2 error
		})
	}
	fake.getStoreConfigReturnsOnCall[i] = struct {
		result1 storage.StoreConfiguration
		result2 error
	}{result1, result2}
}

func (fake *MongoDBProvider) OpenStore(arg1 string) (storage.Store, error) {
	fake.openStoreMutex.Lock()
	ret, specificReturn := fake.openStoreReturnsOnCall[len(fake.openStoreArgsForCall)]
	fake.openStoreArgsForCall = append(fake.openStoreArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.OpenStoreStub
	fakeReturns := fake.openStoreReturns
	fake.recordInvocation("OpenStore", []interface{}{arg1})
	fake.openStoreMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *MongoDBProvider) OpenStoreCallCount() int {
	fake.openStoreMutex.RLock()
	defer fake.openStoreMutex.RUnlock()
	return len(fake.openStoreArgsForCall)
}

func (fake *MongoDBProvider) OpenStoreCalls(stub func(string) (storage.Store, error)) {
	fake.openStoreMutex.Lock()
	defer fake.openStoreMutex.Unlock()
	fake.OpenStoreStub = stub
}

func (fake *MongoDBProvider) OpenStoreArgsForCall(i int) string {
	fake.openStoreMutex.RLock()
	defer fake.openStoreMutex.RUnlock()
	argsForCall := fake.openStoreArgsForCall[i]
	return argsForCall.arg1
}

func (fake *MongoDBProvider) OpenStoreReturns(result1 storage.Store, result2 error) {
	fake.openStoreMutex.Lock()
	defer fake.openStoreMutex.Unlock()
	fake.OpenStoreStub = nil
	fake.openStoreReturns = struct {
		result1 storage.Store
		result2 error
	}{result1, result2}
}

func (fake *MongoDBProvider) OpenStoreReturnsOnCall(i int, result1 storage.Store, result2 error) {
	fake.openStoreMutex.Lock()
	defer fake.openStoreMutex.Unlock()
	fake.OpenStoreStub = nil
	if fake.openStoreReturnsOnCall == nil {
		fake.openStoreReturnsOnCall = make(map[int]struct {
			result1 storage.Store
			result2 error
		})
	}
	fake.openStoreReturnsOnCall[i] = struct {
		result1 storage.Store
		result2 error
	}{result1, result2}
}

func (fake *MongoDBProvider) Ping() error {
	fake.pingMutex.Lock()
	ret, specificReturn := fake.pingReturnsOnCall[len(fake.pingArgsForCall)]
	fake.pingArgsForCall = append(fake.pingArgsForCall, struct {
	}{})
	stub := fake.PingStub
	fakeReturns := fake.pingReturns
	fake.recordInvocation("Ping", []interface{}{})
	fake.pingMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *MongoDBProvider) PingCallCount() int {
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	return len(fake.pingArgsForCall)
}

func (fake *MongoDBProvider) PingCalls(stub func() error) {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.PingStub = stub
}

func (fake *MongoDBProvider) PingReturns(result1 error) {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.PingStub = nil
	fake.pingReturns = struct {
		result1 error
	}{result1}
}

func (fake *MongoDBProvider) PingReturnsOnCall(i int, result1 error) {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.PingStub = nil
	if fake.pingReturnsOnCall == nil {
		fake.pingReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pingReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *MongoDBProvider) SetStoreConfig(arg1 string, arg2 storage.StoreConfiguration) error {
	fake.setStoreConfigMutex.Lock()
	ret, specificReturn := fake.setStoreConfigReturnsOnCall[len(fake.setStoreConfigArgsForCall)]
	fake.setStoreConfigArgsForCall = append(fake.setStoreConfigArgsForCall, struct {
		arg1 string
		arg2 storage.StoreConfiguration
	}{arg1, arg2})
	stub := fake.SetStoreConfigStub
	fakeReturns := fake.setStoreConfigReturns
	fake.recordInvocation("SetStoreConfig", []interface{}{arg1, arg2})
	fake.setStoreConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *MongoDBProvider) SetStoreConfigCallCount() int {
	fake.setStoreConfigMutex.RLock()
	defer fake.setStoreConfigMutex.RUnlock()
	return len(fake.setStoreConfigArgsForCall)
}

func (fake *MongoDBProvider) SetStoreConfigCalls(stub func(string, storage.StoreConfiguration) error) {
	fake.setStoreConfigMutex.Lock()
	defer fake.setStoreConfigMutex.Unlock()
	fake.SetStoreConfigStub = stub
}

func (fake *MongoDBProvider) SetStoreConfigArgsForCall(i int) (string, storage.StoreConfiguration) {
	fake.setStoreConfigMutex.RLock()
	defer fake.setStoreConfigMutex.RUnlock()
	argsForCall := fake.setStoreConfigArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *MongoDBProvider) SetStoreConfigReturns(result1 error) {
	fake.setStoreConfigMutex.Lock()
	defer fake.setStoreConfigMutex.Unlock()
	fake.SetStoreConfigStub = nil
	fake.setStoreConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *MongoDBProvider) SetStoreConfigReturnsOnCall(i int, result1 error) {
	fake.setStoreConfigMutex.Lock()
	defer fake.setStoreConfigMutex.Unlock()
	fake.SetStoreConfigStub = nil
	if fake.setStoreConfigReturnsOnCall == nil {
		fake.setStoreConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setStoreConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *MongoDBProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.createCustomIndexesMutex.RLock()
	defer fake.createCustomIndexesMutex.RUnlock()
	fake.getOpenStoresMutex.RLock()
	defer fake.getOpenStoresMutex.RUnlock()
	fake.getStoreConfigMutex.RLock()
	defer fake.getStoreConfigMutex.RUnlock()
	fake.openStoreMutex.RLock()
	defer fake.openStoreMutex.RUnlock()
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	fake.setStoreConfigMutex.RLock()
	defer fake.setStoreConfigMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *MongoDBProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
