// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/aries-framework-go/spi/storage"
)

type Provider struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	GetOpenStoresStub        func() []storage.Store
	getOpenStoresMutex       sync.RWMutex
	getOpenStoresArgsForCall []struct {
	}
	getOpenStoresReturns struct {
		result1 []storage.Store
	}
	getOpenStoresReturnsOnCall map[int]struct {
		result1 []storage.Store
	}
	GetStoreConfigStub        func(string) (storage.StoreConfiguration, error)
	getStoreConfigMutex       sync.RWMutex
	getStoreConfigArgsForCall []struct {
		arg1 string
	}
	getStoreConfigReturns struct {
		result1 storage.StoreConfiguration
		result2 error
	}
	getStoreConfigReturnsOnCall map[int]struct {
		result1 storage.StoreConfiguration
		result2 error
	}
	OpenStoreStub        func(string) (storage.Store, error)
	openStoreMutex       sync.RWMutex
	openStoreArgsForCall []struct {
		arg1 string
	}
	openStoreReturns struct {
		result1 storage.Store
		result2 error
	}
	openStoreReturnsOnCall map[int]struct {
		result1 storage.Store
		result2 error
	}
	SetStoreConfigStub        func(string, storage.StoreConfiguration) error
	setStoreConfigMutex       sync.RWMutex
	setStoreConfigArgsForCall []struct {
		arg1 string
		arg2 storage.StoreConfiguration
	}
	setStoreConfigReturns struct {
		result1 error
	}
	setStoreConfigReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Provider) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.closeReturns
	return fakeReturns.result1
}

func (fake *Provider) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *Provider) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *Provider) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *Provider) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Provider) GetOpenStores() []storage.Store {
	fake.getOpenStoresMutex.Lock()
	ret, specificReturn := fake.getOpenStoresReturnsOnCall[len(fake.getOpenStoresArgsForCall)]
	fake.getOpenStoresArgsForCall = append(fake.getOpenStoresArgsForCall, struct {
	}{})
	fake.recordInvocation("GetOpenStores", []interface{}{})
	fake.getOpenStoresMutex.Unlock()
	if fake.GetOpenStoresStub != nil {
		return fake.GetOpenStoresStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getOpenStoresReturns
	return fakeReturns.result1
}

func (fake *Provider) GetOpenStoresCallCount() int {
	fake.getOpenStoresMutex.RLock()
	defer fake.getOpenStoresMutex.RUnlock()
	return len(fake.getOpenStoresArgsForCall)
}

func (fake *Provider) GetOpenStoresCalls(stub func() []storage.Store) {
	fake.getOpenStoresMutex.Lock()
	defer fake.getOpenStoresMutex.Unlock()
	fake.GetOpenStoresStub = stub
}

func (fake *Provider) GetOpenStoresReturns(result1 []storage.Store) {
	fake.getOpenStoresMutex.Lock()
	defer fake.getOpenStoresMutex.Unlock()
	fake.GetOpenStoresStub = nil
	fake.getOpenStoresReturns = struct {
		result1 []storage.Store
	}{result1}
}

func (fake *Provider) GetOpenStoresReturnsOnCall(i int, result1 []storage.Store) {
	fake.getOpenStoresMutex.Lock()
	defer fake.getOpenStoresMutex.Unlock()
	fake.GetOpenStoresStub = nil
	if fake.getOpenStoresReturnsOnCall == nil {
		fake.getOpenStoresReturnsOnCall = make(map[int]struct {
			result1 []storage.Store
		})
	}
	fake.getOpenStoresReturnsOnCall[i] = struct {
		result1 []storage.Store
	}{result1}
}

func (fake *Provider) GetStoreConfig(arg1 string) (storage.StoreConfiguration, error) {
	fake.getStoreConfigMutex.Lock()
	ret, specificReturn := fake.getStoreConfigReturnsOnCall[len(fake.getStoreConfigArgsForCall)]
	fake.getStoreConfigArgsForCall = append(fake.getStoreConfigArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetStoreConfig", []interface{}{arg1})
	fake.getStoreConfigMutex.Unlock()
	if fake.GetStoreConfigStub != nil {
		return fake.GetStoreConfigStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getStoreConfigReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Provider) GetStoreConfigCallCount() int {
	fake.getStoreConfigMutex.RLock()
	defer fake.getStoreConfigMutex.RUnlock()
	return len(fake.getStoreConfigArgsForCall)
}

func (fake *Provider) GetStoreConfigCalls(stub func(string) (storage.StoreConfiguration, error)) {
	fake.getStoreConfigMutex.Lock()
	defer fake.getStoreConfigMutex.Unlock()
	fake.GetStoreConfigStub = stub
}

func (fake *Provider) GetStoreConfigArgsForCall(i int) string {
	fake.getStoreConfigMutex.RLock()
	defer fake.getStoreConfigMutex.RUnlock()
	argsForCall := fake.getStoreConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Provider) GetStoreConfigReturns(result1 storage.StoreConfiguration, result2 error) {
	fake.getStoreConfigMutex.Lock()
	defer fake.getStoreConfigMutex.Unlock()
	fake.GetStoreConfigStub = nil
	fake.getStoreConfigReturns = struct {
		result1 storage.StoreConfiguration
		result2 error
	}{result1, result2}
}

func (fake *Provider) GetStoreConfigReturnsOnCall(i int, result1 storage.StoreConfiguration, result2 error) {
	fake.getStoreConfigMutex.Lock()
	defer fake.getStoreConfigMutex.Unlock()
	fake.GetStoreConfigStub = nil
	if fake.getStoreConfigReturnsOnCall == nil {
		fake.getStoreConfigReturnsOnCall = make(map[int]struct {
			result1 storage.StoreConfiguration
			result2 error
		})
	}
	fake.getStoreConfigReturnsOnCall[i] = struct {
		result1 storage.StoreConfiguration
		result2 error
	}{result1, result2}
}

func (fake *Provider) OpenStore(arg1 string) (storage.Store, error) {
	fake.openStoreMutex.Lock()
	ret, specificReturn := fake.openStoreReturnsOnCall[len(fake.openStoreArgsForCall)]
	fake.openStoreArgsForCall = append(fake.openStoreArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("OpenStore", []interface{}{arg1})
	fake.openStoreMutex.Unlock()
	if fake.OpenStoreStub != nil {
		return fake.OpenStoreStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.openStoreReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Provider) OpenStoreCallCount() int {
	fake.openStoreMutex.RLock()
	defer fake.openStoreMutex.RUnlock()
	return len(fake.openStoreArgsForCall)
}

func (fake *Provider) OpenStoreCalls(stub func(string) (storage.Store, error)) {
	fake.openStoreMutex.Lock()
	defer fake.openStoreMutex.Unlock()
	fake.OpenStoreStub = stub
}

func (fake *Provider) OpenStoreArgsForCall(i int) string {
	fake.openStoreMutex.RLock()
	defer fake.openStoreMutex.RUnlock()
	argsForCall := fake.openStoreArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Provider) OpenStoreReturns(result1 storage.Store, result2 error) {
	fake.openStoreMutex.Lock()
	defer fake.openStoreMutex.Unlock()
	fake.OpenStoreStub = nil
	fake.openStoreReturns = struct {
		result1 storage.Store
		result2 error
	}{result1, result2}
}

func (fake *Provider) OpenStoreReturnsOnCall(i int, result1 storage.Store, result2 error) {
	fake.openStoreMutex.Lock()
	defer fake.openStoreMutex.Unlock()
	fake.OpenStoreStub = nil
	if fake.openStoreReturnsOnCall == nil {
		fake.openStoreReturnsOnCall = make(map[int]struct {
			result1 storage.Store
			result2 error
		})
	}
	fake.openStoreReturnsOnCall[i] = struct {
		result1 storage.Store
		result2 error
	}{result1, result2}
}

func (fake *Provider) SetStoreConfig(arg1 string, arg2 storage.StoreConfiguration) error {
	fake.setStoreConfigMutex.Lock()
	ret, specificReturn := fake.setStoreConfigReturnsOnCall[len(fake.setStoreConfigArgsForCall)]
	fake.setStoreConfigArgsForCall = append(fake.setStoreConfigArgsForCall, struct {
		arg1 string
		arg2 storage.StoreConfiguration
	}{arg1, arg2})
	fake.recordInvocation("SetStoreConfig", []interface{}{arg1, arg2})
	fake.setStoreConfigMutex.Unlock()
	if fake.SetStoreConfigStub != nil {
		return fake.SetStoreConfigStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.setStoreConfigReturns
	return fakeReturns.result1
}

func (fake *Provider) SetStoreConfigCallCount() int {
	fake.setStoreConfigMutex.RLock()
	defer fake.setStoreConfigMutex.RUnlock()
	return len(fake.setStoreConfigArgsForCall)
}

func (fake *Provider) SetStoreConfigCalls(stub func(string, storage.StoreConfiguration) error) {
	fake.setStoreConfigMutex.Lock()
	defer fake.setStoreConfigMutex.Unlock()
	fake.SetStoreConfigStub = stub
}

func (fake *Provider) SetStoreConfigArgsForCall(i int) (string, storage.StoreConfiguration) {
	fake.setStoreConfigMutex.RLock()
	defer fake.setStoreConfigMutex.RUnlock()
	argsForCall := fake.setStoreConfigArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Provider) SetStoreConfigReturns(result1 error) {
	fake.setStoreConfigMutex.Lock()
	defer fake.setStoreConfigMutex.Unlock()
	fake.SetStoreConfigStub = nil
	fake.setStoreConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *Provider) SetStoreConfigReturnsOnCall(i int, result1 error) {
	fake.setStoreConfigMutex.Lock()
	defer fake.setStoreConfigMutex.Unlock()
	fake.SetStoreConfigStub = nil
	if fake.setStoreConfigReturnsOnCall == nil {
		fake.setStoreConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setStoreConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Provider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.getOpenStoresMutex.RLock()
	defer fake.getOpenStoresMutex.RUnlock()
	fake.getStoreConfigMutex.RLock()
	defer fake.getStoreConfigMutex.RUnlock()
	fake.openStoreMutex.RLock()
	defer fake.openStoreMutex.RUnlock()
	fake.setStoreConfigMutex.RLock()
	defer fake.setStoreConfigMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Provider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.Provider = new(Provider)
