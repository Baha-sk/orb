// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
)

type DIDPublisher struct {
	PublishDIDStub        func(dids string) error
	publishDIDMutex       sync.RWMutex
	publishDIDArgsForCall []struct {
		dids string
	}
	publishDIDReturns struct {
		result1 error
	}
	publishDIDReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DIDPublisher) PublishDID(dids string) error {
	fake.publishDIDMutex.Lock()
	ret, specificReturn := fake.publishDIDReturnsOnCall[len(fake.publishDIDArgsForCall)]
	fake.publishDIDArgsForCall = append(fake.publishDIDArgsForCall, struct {
		dids string
	}{dids})
	fake.recordInvocation("PublishDID", []interface{}{dids})
	fake.publishDIDMutex.Unlock()
	if fake.PublishDIDStub != nil {
		return fake.PublishDIDStub(dids)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.publishDIDReturns.result1
}

func (fake *DIDPublisher) PublishDIDCallCount() int {
	fake.publishDIDMutex.RLock()
	defer fake.publishDIDMutex.RUnlock()
	return len(fake.publishDIDArgsForCall)
}

func (fake *DIDPublisher) PublishDIDArgsForCall(i int) string {
	fake.publishDIDMutex.RLock()
	defer fake.publishDIDMutex.RUnlock()
	return fake.publishDIDArgsForCall[i].dids
}

func (fake *DIDPublisher) PublishDIDReturns(result1 error) {
	fake.PublishDIDStub = nil
	fake.publishDIDReturns = struct {
		result1 error
	}{result1}
}

func (fake *DIDPublisher) PublishDIDReturnsOnCall(i int, result1 error) {
	fake.PublishDIDStub = nil
	if fake.publishDIDReturnsOnCall == nil {
		fake.publishDIDReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.publishDIDReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *DIDPublisher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.publishDIDMutex.RLock()
	defer fake.publishDIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DIDPublisher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
