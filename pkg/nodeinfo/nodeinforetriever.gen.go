// Code generated by counterfeiter. DO NOT EDIT.
package nodeinfo

import (
	"sync"
)

type NodeInfoRetriever struct {
	GetNodeInfoStub        func(version Version) *NodeInfo
	getNodeInfoMutex       sync.RWMutex
	getNodeInfoArgsForCall []struct {
		version Version
	}
	getNodeInfoReturns struct {
		result1 *NodeInfo
	}
	getNodeInfoReturnsOnCall map[int]struct {
		result1 *NodeInfo
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *NodeInfoRetriever) GetNodeInfo(version Version) *NodeInfo {
	fake.getNodeInfoMutex.Lock()
	ret, specificReturn := fake.getNodeInfoReturnsOnCall[len(fake.getNodeInfoArgsForCall)]
	fake.getNodeInfoArgsForCall = append(fake.getNodeInfoArgsForCall, struct {
		version Version
	}{version})
	fake.recordInvocation("GetNodeInfo", []interface{}{version})
	fake.getNodeInfoMutex.Unlock()
	if fake.GetNodeInfoStub != nil {
		return fake.GetNodeInfoStub(version)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getNodeInfoReturns.result1
}

func (fake *NodeInfoRetriever) GetNodeInfoCallCount() int {
	fake.getNodeInfoMutex.RLock()
	defer fake.getNodeInfoMutex.RUnlock()
	return len(fake.getNodeInfoArgsForCall)
}

func (fake *NodeInfoRetriever) GetNodeInfoArgsForCall(i int) Version {
	fake.getNodeInfoMutex.RLock()
	defer fake.getNodeInfoMutex.RUnlock()
	return fake.getNodeInfoArgsForCall[i].version
}

func (fake *NodeInfoRetriever) GetNodeInfoReturns(result1 *NodeInfo) {
	fake.GetNodeInfoStub = nil
	fake.getNodeInfoReturns = struct {
		result1 *NodeInfo
	}{result1}
}

func (fake *NodeInfoRetriever) GetNodeInfoReturnsOnCall(i int, result1 *NodeInfo) {
	fake.GetNodeInfoStub = nil
	if fake.getNodeInfoReturnsOnCall == nil {
		fake.getNodeInfoReturnsOnCall = make(map[int]struct {
			result1 *NodeInfo
		})
	}
	fake.getNodeInfoReturnsOnCall[i] = struct {
		result1 *NodeInfo
	}{result1}
}

func (fake *NodeInfoRetriever) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getNodeInfoMutex.RLock()
	defer fake.getNodeInfoMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *NodeInfoRetriever) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
