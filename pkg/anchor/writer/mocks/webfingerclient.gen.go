// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
)

type WebFingerCLient struct {
	HasSupportedLedgerTypeStub        func(string) (bool, error)
	hasSupportedLedgerTypeMutex       sync.RWMutex
	hasSupportedLedgerTypeArgsForCall []struct {
		arg1 string
	}
	hasSupportedLedgerTypeReturns struct {
		result1 bool
		result2 error
	}
	hasSupportedLedgerTypeReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *WebFingerCLient) HasSupportedLedgerType(arg1 string) (bool, error) {
	fake.hasSupportedLedgerTypeMutex.Lock()
	ret, specificReturn := fake.hasSupportedLedgerTypeReturnsOnCall[len(fake.hasSupportedLedgerTypeArgsForCall)]
	fake.hasSupportedLedgerTypeArgsForCall = append(fake.hasSupportedLedgerTypeArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.HasSupportedLedgerTypeStub
	fakeReturns := fake.hasSupportedLedgerTypeReturns
	fake.recordInvocation("HasSupportedLedgerType", []interface{}{arg1})
	fake.hasSupportedLedgerTypeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *WebFingerCLient) HasSupportedLedgerTypeCallCount() int {
	fake.hasSupportedLedgerTypeMutex.RLock()
	defer fake.hasSupportedLedgerTypeMutex.RUnlock()
	return len(fake.hasSupportedLedgerTypeArgsForCall)
}

func (fake *WebFingerCLient) HasSupportedLedgerTypeCalls(stub func(string) (bool, error)) {
	fake.hasSupportedLedgerTypeMutex.Lock()
	defer fake.hasSupportedLedgerTypeMutex.Unlock()
	fake.HasSupportedLedgerTypeStub = stub
}

func (fake *WebFingerCLient) HasSupportedLedgerTypeArgsForCall(i int) string {
	fake.hasSupportedLedgerTypeMutex.RLock()
	defer fake.hasSupportedLedgerTypeMutex.RUnlock()
	argsForCall := fake.hasSupportedLedgerTypeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *WebFingerCLient) HasSupportedLedgerTypeReturns(result1 bool, result2 error) {
	fake.hasSupportedLedgerTypeMutex.Lock()
	defer fake.hasSupportedLedgerTypeMutex.Unlock()
	fake.HasSupportedLedgerTypeStub = nil
	fake.hasSupportedLedgerTypeReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *WebFingerCLient) HasSupportedLedgerTypeReturnsOnCall(i int, result1 bool, result2 error) {
	fake.hasSupportedLedgerTypeMutex.Lock()
	defer fake.hasSupportedLedgerTypeMutex.Unlock()
	fake.HasSupportedLedgerTypeStub = nil
	if fake.hasSupportedLedgerTypeReturnsOnCall == nil {
		fake.hasSupportedLedgerTypeReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.hasSupportedLedgerTypeReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *WebFingerCLient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.hasSupportedLedgerTypeMutex.RLock()
	defer fake.hasSupportedLedgerTypeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *WebFingerCLient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
