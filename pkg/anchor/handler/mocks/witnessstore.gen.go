// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"net/url"
	"sync"

	proofa "github.com/trustbloc/orb/pkg/anchor/witness/proof"
)

type WitnessStore struct {
	AddProofStub        func(string, *url.URL, []byte) error
	addProofMutex       sync.RWMutex
	addProofArgsForCall []struct {
		arg1 string
		arg2 *url.URL
		arg3 []byte
	}
	addProofReturns struct {
		result1 error
	}
	addProofReturnsOnCall map[int]struct {
		result1 error
	}
	GetStub        func(string) ([]*proofa.WitnessProof, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 string
	}
	getReturns struct {
		result1 []*proofa.WitnessProof
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 []*proofa.WitnessProof
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *WitnessStore) AddProof(arg1 string, arg2 *url.URL, arg3 []byte) error {
	var arg3Copy []byte
	if arg3 != nil {
		arg3Copy = make([]byte, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.addProofMutex.Lock()
	ret, specificReturn := fake.addProofReturnsOnCall[len(fake.addProofArgsForCall)]
	fake.addProofArgsForCall = append(fake.addProofArgsForCall, struct {
		arg1 string
		arg2 *url.URL
		arg3 []byte
	}{arg1, arg2, arg3Copy})
	stub := fake.AddProofStub
	fakeReturns := fake.addProofReturns
	fake.recordInvocation("AddProof", []interface{}{arg1, arg2, arg3Copy})
	fake.addProofMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *WitnessStore) AddProofCallCount() int {
	fake.addProofMutex.RLock()
	defer fake.addProofMutex.RUnlock()
	return len(fake.addProofArgsForCall)
}

func (fake *WitnessStore) AddProofCalls(stub func(string, *url.URL, []byte) error) {
	fake.addProofMutex.Lock()
	defer fake.addProofMutex.Unlock()
	fake.AddProofStub = stub
}

func (fake *WitnessStore) AddProofArgsForCall(i int) (string, *url.URL, []byte) {
	fake.addProofMutex.RLock()
	defer fake.addProofMutex.RUnlock()
	argsForCall := fake.addProofArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *WitnessStore) AddProofReturns(result1 error) {
	fake.addProofMutex.Lock()
	defer fake.addProofMutex.Unlock()
	fake.AddProofStub = nil
	fake.addProofReturns = struct {
		result1 error
	}{result1}
}

func (fake *WitnessStore) AddProofReturnsOnCall(i int, result1 error) {
	fake.addProofMutex.Lock()
	defer fake.addProofMutex.Unlock()
	fake.AddProofStub = nil
	if fake.addProofReturnsOnCall == nil {
		fake.addProofReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addProofReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *WitnessStore) Get(arg1 string) ([]*proofa.WitnessProof, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *WitnessStore) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *WitnessStore) GetCalls(stub func(string) ([]*proofa.WitnessProof, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *WitnessStore) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1
}

func (fake *WitnessStore) GetReturns(result1 []*proofa.WitnessProof, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 []*proofa.WitnessProof
		result2 error
	}{result1, result2}
}

func (fake *WitnessStore) GetReturnsOnCall(i int, result1 []*proofa.WitnessProof, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 []*proofa.WitnessProof
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 []*proofa.WitnessProof
		result2 error
	}{result1, result2}
}

func (fake *WitnessStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addProofMutex.RLock()
	defer fake.addProofMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *WitnessStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
