// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	proofa "github.com/trustbloc/orb/pkg/anchor/witness/proof"
)

type AnchorIndexStatusStore struct {
	AddStatusStub        func(string, proofa.AnchorIndexStatus) error
	addStatusMutex       sync.RWMutex
	addStatusArgsForCall []struct {
		arg1 string
		arg2 proofa.AnchorIndexStatus
	}
	addStatusReturns struct {
		result1 error
	}
	addStatusReturnsOnCall map[int]struct {
		result1 error
	}
	GetStatusStub        func(string) (proofa.AnchorIndexStatus, error)
	getStatusMutex       sync.RWMutex
	getStatusArgsForCall []struct {
		arg1 string
	}
	getStatusReturns struct {
		result1 proofa.AnchorIndexStatus
		result2 error
	}
	getStatusReturnsOnCall map[int]struct {
		result1 proofa.AnchorIndexStatus
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *AnchorIndexStatusStore) AddStatus(arg1 string, arg2 proofa.AnchorIndexStatus) error {
	fake.addStatusMutex.Lock()
	ret, specificReturn := fake.addStatusReturnsOnCall[len(fake.addStatusArgsForCall)]
	fake.addStatusArgsForCall = append(fake.addStatusArgsForCall, struct {
		arg1 string
		arg2 proofa.AnchorIndexStatus
	}{arg1, arg2})
	fake.recordInvocation("AddStatus", []interface{}{arg1, arg2})
	fake.addStatusMutex.Unlock()
	if fake.AddStatusStub != nil {
		return fake.AddStatusStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.addStatusReturns
	return fakeReturns.result1
}

func (fake *AnchorIndexStatusStore) AddStatusCallCount() int {
	fake.addStatusMutex.RLock()
	defer fake.addStatusMutex.RUnlock()
	return len(fake.addStatusArgsForCall)
}

func (fake *AnchorIndexStatusStore) AddStatusCalls(stub func(string, proofa.AnchorIndexStatus) error) {
	fake.addStatusMutex.Lock()
	defer fake.addStatusMutex.Unlock()
	fake.AddStatusStub = stub
}

func (fake *AnchorIndexStatusStore) AddStatusArgsForCall(i int) (string, proofa.AnchorIndexStatus) {
	fake.addStatusMutex.RLock()
	defer fake.addStatusMutex.RUnlock()
	argsForCall := fake.addStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *AnchorIndexStatusStore) AddStatusReturns(result1 error) {
	fake.addStatusMutex.Lock()
	defer fake.addStatusMutex.Unlock()
	fake.AddStatusStub = nil
	fake.addStatusReturns = struct {
		result1 error
	}{result1}
}

func (fake *AnchorIndexStatusStore) AddStatusReturnsOnCall(i int, result1 error) {
	fake.addStatusMutex.Lock()
	defer fake.addStatusMutex.Unlock()
	fake.AddStatusStub = nil
	if fake.addStatusReturnsOnCall == nil {
		fake.addStatusReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addStatusReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *AnchorIndexStatusStore) GetStatus(arg1 string) (proofa.AnchorIndexStatus, error) {
	fake.getStatusMutex.Lock()
	ret, specificReturn := fake.getStatusReturnsOnCall[len(fake.getStatusArgsForCall)]
	fake.getStatusArgsForCall = append(fake.getStatusArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetStatus", []interface{}{arg1})
	fake.getStatusMutex.Unlock()
	if fake.GetStatusStub != nil {
		return fake.GetStatusStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getStatusReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *AnchorIndexStatusStore) GetStatusCallCount() int {
	fake.getStatusMutex.RLock()
	defer fake.getStatusMutex.RUnlock()
	return len(fake.getStatusArgsForCall)
}

func (fake *AnchorIndexStatusStore) GetStatusCalls(stub func(string) (proofa.AnchorIndexStatus, error)) {
	fake.getStatusMutex.Lock()
	defer fake.getStatusMutex.Unlock()
	fake.GetStatusStub = stub
}

func (fake *AnchorIndexStatusStore) GetStatusArgsForCall(i int) string {
	fake.getStatusMutex.RLock()
	defer fake.getStatusMutex.RUnlock()
	argsForCall := fake.getStatusArgsForCall[i]
	return argsForCall.arg1
}

func (fake *AnchorIndexStatusStore) GetStatusReturns(result1 proofa.AnchorIndexStatus, result2 error) {
	fake.getStatusMutex.Lock()
	defer fake.getStatusMutex.Unlock()
	fake.GetStatusStub = nil
	fake.getStatusReturns = struct {
		result1 proofa.AnchorIndexStatus
		result2 error
	}{result1, result2}
}

func (fake *AnchorIndexStatusStore) GetStatusReturnsOnCall(i int, result1 proofa.AnchorIndexStatus, result2 error) {
	fake.getStatusMutex.Lock()
	defer fake.getStatusMutex.Unlock()
	fake.GetStatusStub = nil
	if fake.getStatusReturnsOnCall == nil {
		fake.getStatusReturnsOnCall = make(map[int]struct {
			result1 proofa.AnchorIndexStatus
			result2 error
		})
	}
	fake.getStatusReturnsOnCall[i] = struct {
		result1 proofa.AnchorIndexStatus
		result2 error
	}{result1, result2}
}

func (fake *AnchorIndexStatusStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addStatusMutex.RLock()
	defer fake.addStatusMutex.RUnlock()
	fake.getStatusMutex.RLock()
	defer fake.getStatusMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *AnchorIndexStatusStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
