// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
)

type PolicyStore struct {
	GetPolicyStub        func() (string, error)
	getPolicyMutex       sync.RWMutex
	getPolicyArgsForCall []struct {
	}
	getPolicyReturns struct {
		result1 string
		result2 error
	}
	getPolicyReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	PutPolicyStub        func(string) error
	putPolicyMutex       sync.RWMutex
	putPolicyArgsForCall []struct {
		arg1 string
	}
	putPolicyReturns struct {
		result1 error
	}
	putPolicyReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *PolicyStore) GetPolicy() (string, error) {
	fake.getPolicyMutex.Lock()
	ret, specificReturn := fake.getPolicyReturnsOnCall[len(fake.getPolicyArgsForCall)]
	fake.getPolicyArgsForCall = append(fake.getPolicyArgsForCall, struct {
	}{})
	stub := fake.GetPolicyStub
	fakeReturns := fake.getPolicyReturns
	fake.recordInvocation("GetPolicy", []interface{}{})
	fake.getPolicyMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *PolicyStore) GetPolicyCallCount() int {
	fake.getPolicyMutex.RLock()
	defer fake.getPolicyMutex.RUnlock()
	return len(fake.getPolicyArgsForCall)
}

func (fake *PolicyStore) GetPolicyCalls(stub func() (string, error)) {
	fake.getPolicyMutex.Lock()
	defer fake.getPolicyMutex.Unlock()
	fake.GetPolicyStub = stub
}

func (fake *PolicyStore) GetPolicyReturns(result1 string, result2 error) {
	fake.getPolicyMutex.Lock()
	defer fake.getPolicyMutex.Unlock()
	fake.GetPolicyStub = nil
	fake.getPolicyReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *PolicyStore) GetPolicyReturnsOnCall(i int, result1 string, result2 error) {
	fake.getPolicyMutex.Lock()
	defer fake.getPolicyMutex.Unlock()
	fake.GetPolicyStub = nil
	if fake.getPolicyReturnsOnCall == nil {
		fake.getPolicyReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getPolicyReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *PolicyStore) PutPolicy(arg1 string) error {
	fake.putPolicyMutex.Lock()
	ret, specificReturn := fake.putPolicyReturnsOnCall[len(fake.putPolicyArgsForCall)]
	fake.putPolicyArgsForCall = append(fake.putPolicyArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.PutPolicyStub
	fakeReturns := fake.putPolicyReturns
	fake.recordInvocation("PutPolicy", []interface{}{arg1})
	fake.putPolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *PolicyStore) PutPolicyCallCount() int {
	fake.putPolicyMutex.RLock()
	defer fake.putPolicyMutex.RUnlock()
	return len(fake.putPolicyArgsForCall)
}

func (fake *PolicyStore) PutPolicyCalls(stub func(string) error) {
	fake.putPolicyMutex.Lock()
	defer fake.putPolicyMutex.Unlock()
	fake.PutPolicyStub = stub
}

func (fake *PolicyStore) PutPolicyArgsForCall(i int) string {
	fake.putPolicyMutex.RLock()
	defer fake.putPolicyMutex.RUnlock()
	argsForCall := fake.putPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *PolicyStore) PutPolicyReturns(result1 error) {
	fake.putPolicyMutex.Lock()
	defer fake.putPolicyMutex.Unlock()
	fake.PutPolicyStub = nil
	fake.putPolicyReturns = struct {
		result1 error
	}{result1}
}

func (fake *PolicyStore) PutPolicyReturnsOnCall(i int, result1 error) {
	fake.putPolicyMutex.Lock()
	defer fake.putPolicyMutex.Unlock()
	fake.PutPolicyStub = nil
	if fake.putPolicyReturnsOnCall == nil {
		fake.putPolicyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.putPolicyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *PolicyStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getPolicyMutex.RLock()
	defer fake.getPolicyMutex.RUnlock()
	fake.putPolicyMutex.RLock()
	defer fake.putPolicyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *PolicyStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
