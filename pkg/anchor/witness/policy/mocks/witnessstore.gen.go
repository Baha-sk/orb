// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"net/url"
	"sync"

	"github.com/trustbloc/orb/pkg/anchor/witness/proof"
)

type WitnessStore struct {
	GetStub        func(string) ([]*proof.WitnessProof, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 string
	}
	getReturns struct {
		result1 []*proof.WitnessProof
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 []*proof.WitnessProof
		result2 error
	}
	UpdateWitnessSelectionStub        func(string, []*url.URL, bool) error
	updateWitnessSelectionMutex       sync.RWMutex
	updateWitnessSelectionArgsForCall []struct {
		arg1 string
		arg2 []*url.URL
		arg3 bool
	}
	updateWitnessSelectionReturns struct {
		result1 error
	}
	updateWitnessSelectionReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *WitnessStore) Get(arg1 string) ([]*proof.WitnessProof, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *WitnessStore) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *WitnessStore) GetCalls(stub func(string) ([]*proof.WitnessProof, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *WitnessStore) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1
}

func (fake *WitnessStore) GetReturns(result1 []*proof.WitnessProof, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 []*proof.WitnessProof
		result2 error
	}{result1, result2}
}

func (fake *WitnessStore) GetReturnsOnCall(i int, result1 []*proof.WitnessProof, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 []*proof.WitnessProof
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 []*proof.WitnessProof
		result2 error
	}{result1, result2}
}

func (fake *WitnessStore) UpdateWitnessSelection(arg1 string, arg2 []*url.URL, arg3 bool) error {
	var arg2Copy []*url.URL
	if arg2 != nil {
		arg2Copy = make([]*url.URL, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.updateWitnessSelectionMutex.Lock()
	ret, specificReturn := fake.updateWitnessSelectionReturnsOnCall[len(fake.updateWitnessSelectionArgsForCall)]
	fake.updateWitnessSelectionArgsForCall = append(fake.updateWitnessSelectionArgsForCall, struct {
		arg1 string
		arg2 []*url.URL
		arg3 bool
	}{arg1, arg2Copy, arg3})
	stub := fake.UpdateWitnessSelectionStub
	fakeReturns := fake.updateWitnessSelectionReturns
	fake.recordInvocation("UpdateWitnessSelection", []interface{}{arg1, arg2Copy, arg3})
	fake.updateWitnessSelectionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *WitnessStore) UpdateWitnessSelectionCallCount() int {
	fake.updateWitnessSelectionMutex.RLock()
	defer fake.updateWitnessSelectionMutex.RUnlock()
	return len(fake.updateWitnessSelectionArgsForCall)
}

func (fake *WitnessStore) UpdateWitnessSelectionCalls(stub func(string, []*url.URL, bool) error) {
	fake.updateWitnessSelectionMutex.Lock()
	defer fake.updateWitnessSelectionMutex.Unlock()
	fake.UpdateWitnessSelectionStub = stub
}

func (fake *WitnessStore) UpdateWitnessSelectionArgsForCall(i int) (string, []*url.URL, bool) {
	fake.updateWitnessSelectionMutex.RLock()
	defer fake.updateWitnessSelectionMutex.RUnlock()
	argsForCall := fake.updateWitnessSelectionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *WitnessStore) UpdateWitnessSelectionReturns(result1 error) {
	fake.updateWitnessSelectionMutex.Lock()
	defer fake.updateWitnessSelectionMutex.Unlock()
	fake.UpdateWitnessSelectionStub = nil
	fake.updateWitnessSelectionReturns = struct {
		result1 error
	}{result1}
}

func (fake *WitnessStore) UpdateWitnessSelectionReturnsOnCall(i int, result1 error) {
	fake.updateWitnessSelectionMutex.Lock()
	defer fake.updateWitnessSelectionMutex.Unlock()
	fake.UpdateWitnessSelectionStub = nil
	if fake.updateWitnessSelectionReturnsOnCall == nil {
		fake.updateWitnessSelectionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateWitnessSelectionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *WitnessStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.updateWitnessSelectionMutex.RLock()
	defer fake.updateWitnessSelectionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *WitnessStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
