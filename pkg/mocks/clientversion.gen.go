// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/trustbloc/orb/pkg/context/common"
	"github.com/trustbloc/sidetree-core-go/pkg/api/protocol"
)

type ClientVersion struct {
	OperationProviderStub        func() protocol.OperationProvider
	operationProviderMutex       sync.RWMutex
	operationProviderArgsForCall []struct {
	}
	operationProviderReturns struct {
		result1 protocol.OperationProvider
	}
	operationProviderReturnsOnCall map[int]struct {
		result1 protocol.OperationProvider
	}
	ProtocolStub        func() protocol.Protocol
	protocolMutex       sync.RWMutex
	protocolArgsForCall []struct {
	}
	protocolReturns struct {
		result1 protocol.Protocol
	}
	protocolReturnsOnCall map[int]struct {
		result1 protocol.Protocol
	}
	VersionStub        func() string
	versionMutex       sync.RWMutex
	versionArgsForCall []struct {
	}
	versionReturns struct {
		result1 string
	}
	versionReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ClientVersion) OperationProvider() protocol.OperationProvider {
	fake.operationProviderMutex.Lock()
	ret, specificReturn := fake.operationProviderReturnsOnCall[len(fake.operationProviderArgsForCall)]
	fake.operationProviderArgsForCall = append(fake.operationProviderArgsForCall, struct {
	}{})
	fake.recordInvocation("OperationProvider", []interface{}{})
	fake.operationProviderMutex.Unlock()
	if fake.OperationProviderStub != nil {
		return fake.OperationProviderStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.operationProviderReturns
	return fakeReturns.result1
}

func (fake *ClientVersion) OperationProviderCallCount() int {
	fake.operationProviderMutex.RLock()
	defer fake.operationProviderMutex.RUnlock()
	return len(fake.operationProviderArgsForCall)
}

func (fake *ClientVersion) OperationProviderCalls(stub func() protocol.OperationProvider) {
	fake.operationProviderMutex.Lock()
	defer fake.operationProviderMutex.Unlock()
	fake.OperationProviderStub = stub
}

func (fake *ClientVersion) OperationProviderReturns(result1 protocol.OperationProvider) {
	fake.operationProviderMutex.Lock()
	defer fake.operationProviderMutex.Unlock()
	fake.OperationProviderStub = nil
	fake.operationProviderReturns = struct {
		result1 protocol.OperationProvider
	}{result1}
}

func (fake *ClientVersion) OperationProviderReturnsOnCall(i int, result1 protocol.OperationProvider) {
	fake.operationProviderMutex.Lock()
	defer fake.operationProviderMutex.Unlock()
	fake.OperationProviderStub = nil
	if fake.operationProviderReturnsOnCall == nil {
		fake.operationProviderReturnsOnCall = make(map[int]struct {
			result1 protocol.OperationProvider
		})
	}
	fake.operationProviderReturnsOnCall[i] = struct {
		result1 protocol.OperationProvider
	}{result1}
}

func (fake *ClientVersion) Protocol() protocol.Protocol {
	fake.protocolMutex.Lock()
	ret, specificReturn := fake.protocolReturnsOnCall[len(fake.protocolArgsForCall)]
	fake.protocolArgsForCall = append(fake.protocolArgsForCall, struct {
	}{})
	fake.recordInvocation("Protocol", []interface{}{})
	fake.protocolMutex.Unlock()
	if fake.ProtocolStub != nil {
		return fake.ProtocolStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.protocolReturns
	return fakeReturns.result1
}

func (fake *ClientVersion) ProtocolCallCount() int {
	fake.protocolMutex.RLock()
	defer fake.protocolMutex.RUnlock()
	return len(fake.protocolArgsForCall)
}

func (fake *ClientVersion) ProtocolCalls(stub func() protocol.Protocol) {
	fake.protocolMutex.Lock()
	defer fake.protocolMutex.Unlock()
	fake.ProtocolStub = stub
}

func (fake *ClientVersion) ProtocolReturns(result1 protocol.Protocol) {
	fake.protocolMutex.Lock()
	defer fake.protocolMutex.Unlock()
	fake.ProtocolStub = nil
	fake.protocolReturns = struct {
		result1 protocol.Protocol
	}{result1}
}

func (fake *ClientVersion) ProtocolReturnsOnCall(i int, result1 protocol.Protocol) {
	fake.protocolMutex.Lock()
	defer fake.protocolMutex.Unlock()
	fake.ProtocolStub = nil
	if fake.protocolReturnsOnCall == nil {
		fake.protocolReturnsOnCall = make(map[int]struct {
			result1 protocol.Protocol
		})
	}
	fake.protocolReturnsOnCall[i] = struct {
		result1 protocol.Protocol
	}{result1}
}

func (fake *ClientVersion) Version() string {
	fake.versionMutex.Lock()
	ret, specificReturn := fake.versionReturnsOnCall[len(fake.versionArgsForCall)]
	fake.versionArgsForCall = append(fake.versionArgsForCall, struct {
	}{})
	fake.recordInvocation("Version", []interface{}{})
	fake.versionMutex.Unlock()
	if fake.VersionStub != nil {
		return fake.VersionStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.versionReturns
	return fakeReturns.result1
}

func (fake *ClientVersion) VersionCallCount() int {
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	return len(fake.versionArgsForCall)
}

func (fake *ClientVersion) VersionCalls(stub func() string) {
	fake.versionMutex.Lock()
	defer fake.versionMutex.Unlock()
	fake.VersionStub = stub
}

func (fake *ClientVersion) VersionReturns(result1 string) {
	fake.versionMutex.Lock()
	defer fake.versionMutex.Unlock()
	fake.VersionStub = nil
	fake.versionReturns = struct {
		result1 string
	}{result1}
}

func (fake *ClientVersion) VersionReturnsOnCall(i int, result1 string) {
	fake.versionMutex.Lock()
	defer fake.versionMutex.Unlock()
	fake.VersionStub = nil
	if fake.versionReturnsOnCall == nil {
		fake.versionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.versionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *ClientVersion) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.operationProviderMutex.RLock()
	defer fake.operationProviderMutex.RUnlock()
	fake.protocolMutex.RLock()
	defer fake.protocolMutex.RUnlock()
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ClientVersion) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ common.ClientVersion = new(ClientVersion)
