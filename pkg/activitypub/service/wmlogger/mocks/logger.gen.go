// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/trustbloc/edge-core/pkg/log"
)

type Logger struct {
	FatalfStub        func(msg string, args ...interface{})
	fatalfMutex       sync.RWMutex
	fatalfArgsForCall []struct {
		msg  string
		args []interface{}
	}
	PanicfStub        func(msg string, args ...interface{})
	panicfMutex       sync.RWMutex
	panicfArgsForCall []struct {
		msg  string
		args []interface{}
	}
	DebugfStub        func(msg string, args ...interface{})
	debugfMutex       sync.RWMutex
	debugfArgsForCall []struct {
		msg  string
		args []interface{}
	}
	InfofStub        func(msg string, args ...interface{})
	infofMutex       sync.RWMutex
	infofArgsForCall []struct {
		msg  string
		args []interface{}
	}
	WarnfStub        func(msg string, args ...interface{})
	warnfMutex       sync.RWMutex
	warnfArgsForCall []struct {
		msg  string
		args []interface{}
	}
	ErrorfStub        func(msg string, args ...interface{})
	errorfMutex       sync.RWMutex
	errorfArgsForCall []struct {
		msg  string
		args []interface{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Logger) Fatalf(msg string, args ...interface{}) {
	fake.fatalfMutex.Lock()
	fake.fatalfArgsForCall = append(fake.fatalfArgsForCall, struct {
		msg  string
		args []interface{}
	}{msg, args})
	fake.recordInvocation("Fatalf", []interface{}{msg, args})
	fake.fatalfMutex.Unlock()
	if fake.FatalfStub != nil {
		fake.FatalfStub(msg, args...)
	}
}

func (fake *Logger) FatalfCallCount() int {
	fake.fatalfMutex.RLock()
	defer fake.fatalfMutex.RUnlock()
	return len(fake.fatalfArgsForCall)
}

func (fake *Logger) FatalfArgsForCall(i int) (string, []interface{}) {
	fake.fatalfMutex.RLock()
	defer fake.fatalfMutex.RUnlock()
	return fake.fatalfArgsForCall[i].msg, fake.fatalfArgsForCall[i].args
}

func (fake *Logger) Panicf(msg string, args ...interface{}) {
	fake.panicfMutex.Lock()
	fake.panicfArgsForCall = append(fake.panicfArgsForCall, struct {
		msg  string
		args []interface{}
	}{msg, args})
	fake.recordInvocation("Panicf", []interface{}{msg, args})
	fake.panicfMutex.Unlock()
	if fake.PanicfStub != nil {
		fake.PanicfStub(msg, args...)
	}
}

func (fake *Logger) PanicfCallCount() int {
	fake.panicfMutex.RLock()
	defer fake.panicfMutex.RUnlock()
	return len(fake.panicfArgsForCall)
}

func (fake *Logger) PanicfArgsForCall(i int) (string, []interface{}) {
	fake.panicfMutex.RLock()
	defer fake.panicfMutex.RUnlock()
	return fake.panicfArgsForCall[i].msg, fake.panicfArgsForCall[i].args
}

func (fake *Logger) Debugf(msg string, args ...interface{}) {
	fake.debugfMutex.Lock()
	fake.debugfArgsForCall = append(fake.debugfArgsForCall, struct {
		msg  string
		args []interface{}
	}{msg, args})
	fake.recordInvocation("Debugf", []interface{}{msg, args})
	fake.debugfMutex.Unlock()
	if fake.DebugfStub != nil {
		fake.DebugfStub(msg, args...)
	}
}

func (fake *Logger) DebugfCallCount() int {
	fake.debugfMutex.RLock()
	defer fake.debugfMutex.RUnlock()
	return len(fake.debugfArgsForCall)
}

func (fake *Logger) DebugfArgsForCall(i int) (string, []interface{}) {
	fake.debugfMutex.RLock()
	defer fake.debugfMutex.RUnlock()
	return fake.debugfArgsForCall[i].msg, fake.debugfArgsForCall[i].args
}

func (fake *Logger) Infof(msg string, args ...interface{}) {
	fake.infofMutex.Lock()
	fake.infofArgsForCall = append(fake.infofArgsForCall, struct {
		msg  string
		args []interface{}
	}{msg, args})
	fake.recordInvocation("Infof", []interface{}{msg, args})
	fake.infofMutex.Unlock()
	if fake.InfofStub != nil {
		fake.InfofStub(msg, args...)
	}
}

func (fake *Logger) InfofCallCount() int {
	fake.infofMutex.RLock()
	defer fake.infofMutex.RUnlock()
	return len(fake.infofArgsForCall)
}

func (fake *Logger) InfofArgsForCall(i int) (string, []interface{}) {
	fake.infofMutex.RLock()
	defer fake.infofMutex.RUnlock()
	return fake.infofArgsForCall[i].msg, fake.infofArgsForCall[i].args
}

func (fake *Logger) Warnf(msg string, args ...interface{}) {
	fake.warnfMutex.Lock()
	fake.warnfArgsForCall = append(fake.warnfArgsForCall, struct {
		msg  string
		args []interface{}
	}{msg, args})
	fake.recordInvocation("Warnf", []interface{}{msg, args})
	fake.warnfMutex.Unlock()
	if fake.WarnfStub != nil {
		fake.WarnfStub(msg, args...)
	}
}

func (fake *Logger) WarnfCallCount() int {
	fake.warnfMutex.RLock()
	defer fake.warnfMutex.RUnlock()
	return len(fake.warnfArgsForCall)
}

func (fake *Logger) WarnfArgsForCall(i int) (string, []interface{}) {
	fake.warnfMutex.RLock()
	defer fake.warnfMutex.RUnlock()
	return fake.warnfArgsForCall[i].msg, fake.warnfArgsForCall[i].args
}

func (fake *Logger) Errorf(msg string, args ...interface{}) {
	fake.errorfMutex.Lock()
	fake.errorfArgsForCall = append(fake.errorfArgsForCall, struct {
		msg  string
		args []interface{}
	}{msg, args})
	fake.recordInvocation("Errorf", []interface{}{msg, args})
	fake.errorfMutex.Unlock()
	if fake.ErrorfStub != nil {
		fake.ErrorfStub(msg, args...)
	}
}

func (fake *Logger) ErrorfCallCount() int {
	fake.errorfMutex.RLock()
	defer fake.errorfMutex.RUnlock()
	return len(fake.errorfArgsForCall)
}

func (fake *Logger) ErrorfArgsForCall(i int) (string, []interface{}) {
	fake.errorfMutex.RLock()
	defer fake.errorfMutex.RUnlock()
	return fake.errorfArgsForCall[i].msg, fake.errorfArgsForCall[i].args
}

func (fake *Logger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fatalfMutex.RLock()
	defer fake.fatalfMutex.RUnlock()
	fake.panicfMutex.RLock()
	defer fake.panicfMutex.RUnlock()
	fake.debugfMutex.RLock()
	defer fake.debugfMutex.RUnlock()
	fake.infofMutex.RLock()
	defer fake.infofMutex.RUnlock()
	fake.warnfMutex.RLock()
	defer fake.warnfMutex.RUnlock()
	fake.errorfMutex.RLock()
	defer fake.errorfMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Logger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ log.Logger = new(Logger)
