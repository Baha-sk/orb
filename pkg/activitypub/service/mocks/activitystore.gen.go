// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"net/url"
	"sync"

	"github.com/trustbloc/orb/pkg/activitypub/store/spi"
	"github.com/trustbloc/orb/pkg/activitypub/vocab"
)

type ActivityStore struct {
	PutActorStub        func(actor *vocab.ActorType) error
	putActorMutex       sync.RWMutex
	putActorArgsForCall []struct {
		actor *vocab.ActorType
	}
	putActorReturns struct {
		result1 error
	}
	putActorReturnsOnCall map[int]struct {
		result1 error
	}
	GetActorStub        func(actorIRI *url.URL) (*vocab.ActorType, error)
	getActorMutex       sync.RWMutex
	getActorArgsForCall []struct {
		actorIRI *url.URL
	}
	getActorReturns struct {
		result1 *vocab.ActorType
		result2 error
	}
	getActorReturnsOnCall map[int]struct {
		result1 *vocab.ActorType
		result2 error
	}
	AddActivityStub        func(storeType spi.ActivityStoreType, activity *vocab.ActivityType) error
	addActivityMutex       sync.RWMutex
	addActivityArgsForCall []struct {
		storeType spi.ActivityStoreType
		activity  *vocab.ActivityType
	}
	addActivityReturns struct {
		result1 error
	}
	addActivityReturnsOnCall map[int]struct {
		result1 error
	}
	GetActivityStub        func(storeType spi.ActivityStoreType, activityID string) (*vocab.ActivityType, error)
	getActivityMutex       sync.RWMutex
	getActivityArgsForCall []struct {
		storeType  spi.ActivityStoreType
		activityID string
	}
	getActivityReturns struct {
		result1 *vocab.ActivityType
		result2 error
	}
	getActivityReturnsOnCall map[int]struct {
		result1 *vocab.ActivityType
		result2 error
	}
	QueryActivitiesStub        func(storeType spi.ActivityStoreType, query *spi.Criteria) (spi.ActivityResultsIterator, error)
	queryActivitiesMutex       sync.RWMutex
	queryActivitiesArgsForCall []struct {
		storeType spi.ActivityStoreType
		query     *spi.Criteria
	}
	queryActivitiesReturns struct {
		result1 spi.ActivityResultsIterator
		result2 error
	}
	queryActivitiesReturnsOnCall map[int]struct {
		result1 spi.ActivityResultsIterator
		result2 error
	}
	AddReferenceStub        func(refType spi.ReferenceType, actorIRI *url.URL, referenceIRI *url.URL) error
	addReferenceMutex       sync.RWMutex
	addReferenceArgsForCall []struct {
		refType      spi.ReferenceType
		actorIRI     *url.URL
		referenceIRI *url.URL
	}
	addReferenceReturns struct {
		result1 error
	}
	addReferenceReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteReferenceStub        func(refType spi.ReferenceType, actorIRI *url.URL, referenceIRI *url.URL) error
	deleteReferenceMutex       sync.RWMutex
	deleteReferenceArgsForCall []struct {
		refType      spi.ReferenceType
		actorIRI     *url.URL
		referenceIRI *url.URL
	}
	deleteReferenceReturns struct {
		result1 error
	}
	deleteReferenceReturnsOnCall map[int]struct {
		result1 error
	}
	GetReferencesStub        func(refType spi.ReferenceType, actorIRI *url.URL) ([]*url.URL, error)
	getReferencesMutex       sync.RWMutex
	getReferencesArgsForCall []struct {
		refType  spi.ReferenceType
		actorIRI *url.URL
	}
	getReferencesReturns struct {
		result1 []*url.URL
		result2 error
	}
	getReferencesReturnsOnCall map[int]struct {
		result1 []*url.URL
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ActivityStore) PutActor(actor *vocab.ActorType) error {
	fake.putActorMutex.Lock()
	ret, specificReturn := fake.putActorReturnsOnCall[len(fake.putActorArgsForCall)]
	fake.putActorArgsForCall = append(fake.putActorArgsForCall, struct {
		actor *vocab.ActorType
	}{actor})
	fake.recordInvocation("PutActor", []interface{}{actor})
	fake.putActorMutex.Unlock()
	if fake.PutActorStub != nil {
		return fake.PutActorStub(actor)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.putActorReturns.result1
}

func (fake *ActivityStore) PutActorCallCount() int {
	fake.putActorMutex.RLock()
	defer fake.putActorMutex.RUnlock()
	return len(fake.putActorArgsForCall)
}

func (fake *ActivityStore) PutActorArgsForCall(i int) *vocab.ActorType {
	fake.putActorMutex.RLock()
	defer fake.putActorMutex.RUnlock()
	return fake.putActorArgsForCall[i].actor
}

func (fake *ActivityStore) PutActorReturns(result1 error) {
	fake.PutActorStub = nil
	fake.putActorReturns = struct {
		result1 error
	}{result1}
}

func (fake *ActivityStore) PutActorReturnsOnCall(i int, result1 error) {
	fake.PutActorStub = nil
	if fake.putActorReturnsOnCall == nil {
		fake.putActorReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.putActorReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ActivityStore) GetActor(actorIRI *url.URL) (*vocab.ActorType, error) {
	fake.getActorMutex.Lock()
	ret, specificReturn := fake.getActorReturnsOnCall[len(fake.getActorArgsForCall)]
	fake.getActorArgsForCall = append(fake.getActorArgsForCall, struct {
		actorIRI *url.URL
	}{actorIRI})
	fake.recordInvocation("GetActor", []interface{}{actorIRI})
	fake.getActorMutex.Unlock()
	if fake.GetActorStub != nil {
		return fake.GetActorStub(actorIRI)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getActorReturns.result1, fake.getActorReturns.result2
}

func (fake *ActivityStore) GetActorCallCount() int {
	fake.getActorMutex.RLock()
	defer fake.getActorMutex.RUnlock()
	return len(fake.getActorArgsForCall)
}

func (fake *ActivityStore) GetActorArgsForCall(i int) *url.URL {
	fake.getActorMutex.RLock()
	defer fake.getActorMutex.RUnlock()
	return fake.getActorArgsForCall[i].actorIRI
}

func (fake *ActivityStore) GetActorReturns(result1 *vocab.ActorType, result2 error) {
	fake.GetActorStub = nil
	fake.getActorReturns = struct {
		result1 *vocab.ActorType
		result2 error
	}{result1, result2}
}

func (fake *ActivityStore) GetActorReturnsOnCall(i int, result1 *vocab.ActorType, result2 error) {
	fake.GetActorStub = nil
	if fake.getActorReturnsOnCall == nil {
		fake.getActorReturnsOnCall = make(map[int]struct {
			result1 *vocab.ActorType
			result2 error
		})
	}
	fake.getActorReturnsOnCall[i] = struct {
		result1 *vocab.ActorType
		result2 error
	}{result1, result2}
}

func (fake *ActivityStore) AddActivity(storeType spi.ActivityStoreType, activity *vocab.ActivityType) error {
	fake.addActivityMutex.Lock()
	ret, specificReturn := fake.addActivityReturnsOnCall[len(fake.addActivityArgsForCall)]
	fake.addActivityArgsForCall = append(fake.addActivityArgsForCall, struct {
		storeType spi.ActivityStoreType
		activity  *vocab.ActivityType
	}{storeType, activity})
	fake.recordInvocation("AddActivity", []interface{}{storeType, activity})
	fake.addActivityMutex.Unlock()
	if fake.AddActivityStub != nil {
		return fake.AddActivityStub(storeType, activity)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.addActivityReturns.result1
}

func (fake *ActivityStore) AddActivityCallCount() int {
	fake.addActivityMutex.RLock()
	defer fake.addActivityMutex.RUnlock()
	return len(fake.addActivityArgsForCall)
}

func (fake *ActivityStore) AddActivityArgsForCall(i int) (spi.ActivityStoreType, *vocab.ActivityType) {
	fake.addActivityMutex.RLock()
	defer fake.addActivityMutex.RUnlock()
	return fake.addActivityArgsForCall[i].storeType, fake.addActivityArgsForCall[i].activity
}

func (fake *ActivityStore) AddActivityReturns(result1 error) {
	fake.AddActivityStub = nil
	fake.addActivityReturns = struct {
		result1 error
	}{result1}
}

func (fake *ActivityStore) AddActivityReturnsOnCall(i int, result1 error) {
	fake.AddActivityStub = nil
	if fake.addActivityReturnsOnCall == nil {
		fake.addActivityReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addActivityReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ActivityStore) GetActivity(storeType spi.ActivityStoreType, activityID string) (*vocab.ActivityType, error) {
	fake.getActivityMutex.Lock()
	ret, specificReturn := fake.getActivityReturnsOnCall[len(fake.getActivityArgsForCall)]
	fake.getActivityArgsForCall = append(fake.getActivityArgsForCall, struct {
		storeType  spi.ActivityStoreType
		activityID string
	}{storeType, activityID})
	fake.recordInvocation("GetActivity", []interface{}{storeType, activityID})
	fake.getActivityMutex.Unlock()
	if fake.GetActivityStub != nil {
		return fake.GetActivityStub(storeType, activityID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getActivityReturns.result1, fake.getActivityReturns.result2
}

func (fake *ActivityStore) GetActivityCallCount() int {
	fake.getActivityMutex.RLock()
	defer fake.getActivityMutex.RUnlock()
	return len(fake.getActivityArgsForCall)
}

func (fake *ActivityStore) GetActivityArgsForCall(i int) (spi.ActivityStoreType, string) {
	fake.getActivityMutex.RLock()
	defer fake.getActivityMutex.RUnlock()
	return fake.getActivityArgsForCall[i].storeType, fake.getActivityArgsForCall[i].activityID
}

func (fake *ActivityStore) GetActivityReturns(result1 *vocab.ActivityType, result2 error) {
	fake.GetActivityStub = nil
	fake.getActivityReturns = struct {
		result1 *vocab.ActivityType
		result2 error
	}{result1, result2}
}

func (fake *ActivityStore) GetActivityReturnsOnCall(i int, result1 *vocab.ActivityType, result2 error) {
	fake.GetActivityStub = nil
	if fake.getActivityReturnsOnCall == nil {
		fake.getActivityReturnsOnCall = make(map[int]struct {
			result1 *vocab.ActivityType
			result2 error
		})
	}
	fake.getActivityReturnsOnCall[i] = struct {
		result1 *vocab.ActivityType
		result2 error
	}{result1, result2}
}

func (fake *ActivityStore) QueryActivities(storeType spi.ActivityStoreType, query *spi.Criteria) (spi.ActivityResultsIterator, error) {
	fake.queryActivitiesMutex.Lock()
	ret, specificReturn := fake.queryActivitiesReturnsOnCall[len(fake.queryActivitiesArgsForCall)]
	fake.queryActivitiesArgsForCall = append(fake.queryActivitiesArgsForCall, struct {
		storeType spi.ActivityStoreType
		query     *spi.Criteria
	}{storeType, query})
	fake.recordInvocation("QueryActivities", []interface{}{storeType, query})
	fake.queryActivitiesMutex.Unlock()
	if fake.QueryActivitiesStub != nil {
		return fake.QueryActivitiesStub(storeType, query)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.queryActivitiesReturns.result1, fake.queryActivitiesReturns.result2
}

func (fake *ActivityStore) QueryActivitiesCallCount() int {
	fake.queryActivitiesMutex.RLock()
	defer fake.queryActivitiesMutex.RUnlock()
	return len(fake.queryActivitiesArgsForCall)
}

func (fake *ActivityStore) QueryActivitiesArgsForCall(i int) (spi.ActivityStoreType, *spi.Criteria) {
	fake.queryActivitiesMutex.RLock()
	defer fake.queryActivitiesMutex.RUnlock()
	return fake.queryActivitiesArgsForCall[i].storeType, fake.queryActivitiesArgsForCall[i].query
}

func (fake *ActivityStore) QueryActivitiesReturns(result1 spi.ActivityResultsIterator, result2 error) {
	fake.QueryActivitiesStub = nil
	fake.queryActivitiesReturns = struct {
		result1 spi.ActivityResultsIterator
		result2 error
	}{result1, result2}
}

func (fake *ActivityStore) QueryActivitiesReturnsOnCall(i int, result1 spi.ActivityResultsIterator, result2 error) {
	fake.QueryActivitiesStub = nil
	if fake.queryActivitiesReturnsOnCall == nil {
		fake.queryActivitiesReturnsOnCall = make(map[int]struct {
			result1 spi.ActivityResultsIterator
			result2 error
		})
	}
	fake.queryActivitiesReturnsOnCall[i] = struct {
		result1 spi.ActivityResultsIterator
		result2 error
	}{result1, result2}
}

func (fake *ActivityStore) AddReference(refType spi.ReferenceType, actorIRI *url.URL, referenceIRI *url.URL) error {
	fake.addReferenceMutex.Lock()
	ret, specificReturn := fake.addReferenceReturnsOnCall[len(fake.addReferenceArgsForCall)]
	fake.addReferenceArgsForCall = append(fake.addReferenceArgsForCall, struct {
		refType      spi.ReferenceType
		actorIRI     *url.URL
		referenceIRI *url.URL
	}{refType, actorIRI, referenceIRI})
	fake.recordInvocation("AddReference", []interface{}{refType, actorIRI, referenceIRI})
	fake.addReferenceMutex.Unlock()
	if fake.AddReferenceStub != nil {
		return fake.AddReferenceStub(refType, actorIRI, referenceIRI)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.addReferenceReturns.result1
}

func (fake *ActivityStore) AddReferenceCallCount() int {
	fake.addReferenceMutex.RLock()
	defer fake.addReferenceMutex.RUnlock()
	return len(fake.addReferenceArgsForCall)
}

func (fake *ActivityStore) AddReferenceArgsForCall(i int) (spi.ReferenceType, *url.URL, *url.URL) {
	fake.addReferenceMutex.RLock()
	defer fake.addReferenceMutex.RUnlock()
	return fake.addReferenceArgsForCall[i].refType, fake.addReferenceArgsForCall[i].actorIRI, fake.addReferenceArgsForCall[i].referenceIRI
}

func (fake *ActivityStore) AddReferenceReturns(result1 error) {
	fake.AddReferenceStub = nil
	fake.addReferenceReturns = struct {
		result1 error
	}{result1}
}

func (fake *ActivityStore) AddReferenceReturnsOnCall(i int, result1 error) {
	fake.AddReferenceStub = nil
	if fake.addReferenceReturnsOnCall == nil {
		fake.addReferenceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addReferenceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ActivityStore) DeleteReference(refType spi.ReferenceType, actorIRI *url.URL, referenceIRI *url.URL) error {
	fake.deleteReferenceMutex.Lock()
	ret, specificReturn := fake.deleteReferenceReturnsOnCall[len(fake.deleteReferenceArgsForCall)]
	fake.deleteReferenceArgsForCall = append(fake.deleteReferenceArgsForCall, struct {
		refType      spi.ReferenceType
		actorIRI     *url.URL
		referenceIRI *url.URL
	}{refType, actorIRI, referenceIRI})
	fake.recordInvocation("DeleteReference", []interface{}{refType, actorIRI, referenceIRI})
	fake.deleteReferenceMutex.Unlock()
	if fake.DeleteReferenceStub != nil {
		return fake.DeleteReferenceStub(refType, actorIRI, referenceIRI)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteReferenceReturns.result1
}

func (fake *ActivityStore) DeleteReferenceCallCount() int {
	fake.deleteReferenceMutex.RLock()
	defer fake.deleteReferenceMutex.RUnlock()
	return len(fake.deleteReferenceArgsForCall)
}

func (fake *ActivityStore) DeleteReferenceArgsForCall(i int) (spi.ReferenceType, *url.URL, *url.URL) {
	fake.deleteReferenceMutex.RLock()
	defer fake.deleteReferenceMutex.RUnlock()
	return fake.deleteReferenceArgsForCall[i].refType, fake.deleteReferenceArgsForCall[i].actorIRI, fake.deleteReferenceArgsForCall[i].referenceIRI
}

func (fake *ActivityStore) DeleteReferenceReturns(result1 error) {
	fake.DeleteReferenceStub = nil
	fake.deleteReferenceReturns = struct {
		result1 error
	}{result1}
}

func (fake *ActivityStore) DeleteReferenceReturnsOnCall(i int, result1 error) {
	fake.DeleteReferenceStub = nil
	if fake.deleteReferenceReturnsOnCall == nil {
		fake.deleteReferenceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReferenceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ActivityStore) GetReferences(refType spi.ReferenceType, actorIRI *url.URL) ([]*url.URL, error) {
	fake.getReferencesMutex.Lock()
	ret, specificReturn := fake.getReferencesReturnsOnCall[len(fake.getReferencesArgsForCall)]
	fake.getReferencesArgsForCall = append(fake.getReferencesArgsForCall, struct {
		refType  spi.ReferenceType
		actorIRI *url.URL
	}{refType, actorIRI})
	fake.recordInvocation("GetReferences", []interface{}{refType, actorIRI})
	fake.getReferencesMutex.Unlock()
	if fake.GetReferencesStub != nil {
		return fake.GetReferencesStub(refType, actorIRI)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getReferencesReturns.result1, fake.getReferencesReturns.result2
}

func (fake *ActivityStore) GetReferencesCallCount() int {
	fake.getReferencesMutex.RLock()
	defer fake.getReferencesMutex.RUnlock()
	return len(fake.getReferencesArgsForCall)
}

func (fake *ActivityStore) GetReferencesArgsForCall(i int) (spi.ReferenceType, *url.URL) {
	fake.getReferencesMutex.RLock()
	defer fake.getReferencesMutex.RUnlock()
	return fake.getReferencesArgsForCall[i].refType, fake.getReferencesArgsForCall[i].actorIRI
}

func (fake *ActivityStore) GetReferencesReturns(result1 []*url.URL, result2 error) {
	fake.GetReferencesStub = nil
	fake.getReferencesReturns = struct {
		result1 []*url.URL
		result2 error
	}{result1, result2}
}

func (fake *ActivityStore) GetReferencesReturnsOnCall(i int, result1 []*url.URL, result2 error) {
	fake.GetReferencesStub = nil
	if fake.getReferencesReturnsOnCall == nil {
		fake.getReferencesReturnsOnCall = make(map[int]struct {
			result1 []*url.URL
			result2 error
		})
	}
	fake.getReferencesReturnsOnCall[i] = struct {
		result1 []*url.URL
		result2 error
	}{result1, result2}
}

func (fake *ActivityStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.putActorMutex.RLock()
	defer fake.putActorMutex.RUnlock()
	fake.getActorMutex.RLock()
	defer fake.getActorMutex.RUnlock()
	fake.addActivityMutex.RLock()
	defer fake.addActivityMutex.RUnlock()
	fake.getActivityMutex.RLock()
	defer fake.getActivityMutex.RUnlock()
	fake.queryActivitiesMutex.RLock()
	defer fake.queryActivitiesMutex.RUnlock()
	fake.addReferenceMutex.RLock()
	defer fake.addReferenceMutex.RUnlock()
	fake.deleteReferenceMutex.RLock()
	defer fake.deleteReferenceMutex.RUnlock()
	fake.getReferencesMutex.RLock()
	defer fake.getReferencesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ActivityStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ spi.Store = new(ActivityStore)
