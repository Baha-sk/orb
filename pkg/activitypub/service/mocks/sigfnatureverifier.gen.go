// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"net/http"
	"net/url"
	"sync"
)

type SignatureVerifier struct {
	VerifyRequestStub        func(req *http.Request) (*url.URL, error)
	verifyRequestMutex       sync.RWMutex
	verifyRequestArgsForCall []struct {
		req *http.Request
	}
	verifyRequestReturns struct {
		result1 *url.URL
		result2 error
	}
	verifyRequestReturnsOnCall map[int]struct {
		result1 *url.URL
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SignatureVerifier) VerifyRequest(req *http.Request) (*url.URL, error) {
	fake.verifyRequestMutex.Lock()
	ret, specificReturn := fake.verifyRequestReturnsOnCall[len(fake.verifyRequestArgsForCall)]
	fake.verifyRequestArgsForCall = append(fake.verifyRequestArgsForCall, struct {
		req *http.Request
	}{req})
	fake.recordInvocation("VerifyRequest", []interface{}{req})
	fake.verifyRequestMutex.Unlock()
	if fake.VerifyRequestStub != nil {
		return fake.VerifyRequestStub(req)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.verifyRequestReturns.result1, fake.verifyRequestReturns.result2
}

func (fake *SignatureVerifier) VerifyRequestCallCount() int {
	fake.verifyRequestMutex.RLock()
	defer fake.verifyRequestMutex.RUnlock()
	return len(fake.verifyRequestArgsForCall)
}

func (fake *SignatureVerifier) VerifyRequestArgsForCall(i int) *http.Request {
	fake.verifyRequestMutex.RLock()
	defer fake.verifyRequestMutex.RUnlock()
	return fake.verifyRequestArgsForCall[i].req
}

func (fake *SignatureVerifier) VerifyRequestReturns(result1 *url.URL, result2 error) {
	fake.VerifyRequestStub = nil
	fake.verifyRequestReturns = struct {
		result1 *url.URL
		result2 error
	}{result1, result2}
}

func (fake *SignatureVerifier) VerifyRequestReturnsOnCall(i int, result1 *url.URL, result2 error) {
	fake.VerifyRequestStub = nil
	if fake.verifyRequestReturnsOnCall == nil {
		fake.verifyRequestReturnsOnCall = make(map[int]struct {
			result1 *url.URL
			result2 error
		})
	}
	fake.verifyRequestReturnsOnCall[i] = struct {
		result1 *url.URL
		result2 error
	}{result1, result2}
}

func (fake *SignatureVerifier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.verifyRequestMutex.RLock()
	defer fake.verifyRequestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *SignatureVerifier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
