// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
)

type AuthTokenMgr struct {
	RequiredAuthTokensStub        func(endpoint, method string) ([]string, error)
	requiredAuthTokensMutex       sync.RWMutex
	requiredAuthTokensArgsForCall []struct {
		endpoint string
		method   string
	}
	requiredAuthTokensReturns struct {
		result1 []string
		result2 error
	}
	requiredAuthTokensReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *AuthTokenMgr) RequiredAuthTokens(endpoint string, method string) ([]string, error) {
	fake.requiredAuthTokensMutex.Lock()
	ret, specificReturn := fake.requiredAuthTokensReturnsOnCall[len(fake.requiredAuthTokensArgsForCall)]
	fake.requiredAuthTokensArgsForCall = append(fake.requiredAuthTokensArgsForCall, struct {
		endpoint string
		method   string
	}{endpoint, method})
	fake.recordInvocation("RequiredAuthTokens", []interface{}{endpoint, method})
	fake.requiredAuthTokensMutex.Unlock()
	if fake.RequiredAuthTokensStub != nil {
		return fake.RequiredAuthTokensStub(endpoint, method)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.requiredAuthTokensReturns.result1, fake.requiredAuthTokensReturns.result2
}

func (fake *AuthTokenMgr) RequiredAuthTokensCallCount() int {
	fake.requiredAuthTokensMutex.RLock()
	defer fake.requiredAuthTokensMutex.RUnlock()
	return len(fake.requiredAuthTokensArgsForCall)
}

func (fake *AuthTokenMgr) RequiredAuthTokensArgsForCall(i int) (string, string) {
	fake.requiredAuthTokensMutex.RLock()
	defer fake.requiredAuthTokensMutex.RUnlock()
	return fake.requiredAuthTokensArgsForCall[i].endpoint, fake.requiredAuthTokensArgsForCall[i].method
}

func (fake *AuthTokenMgr) RequiredAuthTokensReturns(result1 []string, result2 error) {
	fake.RequiredAuthTokensStub = nil
	fake.requiredAuthTokensReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *AuthTokenMgr) RequiredAuthTokensReturnsOnCall(i int, result1 []string, result2 error) {
	fake.RequiredAuthTokensStub = nil
	if fake.requiredAuthTokensReturnsOnCall == nil {
		fake.requiredAuthTokensReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.requiredAuthTokensReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *AuthTokenMgr) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.requiredAuthTokensMutex.RLock()
	defer fake.requiredAuthTokensMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *AuthTokenMgr) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
