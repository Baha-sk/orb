// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"net/url"
	"sync"

	"github.com/trustbloc/orb/pkg/activitypub/service/spi"
)

type AcceptListMgr struct {
	UpdateStub        func(acceptType string, additions, removals []*url.URL) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		acceptType string
		additions  []*url.URL
		removals   []*url.URL
	}
	updateReturns struct {
		result1 error
	}
	updateReturnsOnCall map[int]struct {
		result1 error
	}
	GetStub        func(acceptType string) ([]*url.URL, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		acceptType string
	}
	getReturns struct {
		result1 []*url.URL
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 []*url.URL
		result2 error
	}
	GetAllStub        func() ([]*spi.AcceptList, error)
	getAllMutex       sync.RWMutex
	getAllArgsForCall []struct{}
	getAllReturns     struct {
		result1 []*spi.AcceptList
		result2 error
	}
	getAllReturnsOnCall map[int]struct {
		result1 []*spi.AcceptList
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *AcceptListMgr) Update(acceptType string, additions []*url.URL, removals []*url.URL) error {
	var additionsCopy []*url.URL
	if additions != nil {
		additionsCopy = make([]*url.URL, len(additions))
		copy(additionsCopy, additions)
	}
	var removalsCopy []*url.URL
	if removals != nil {
		removalsCopy = make([]*url.URL, len(removals))
		copy(removalsCopy, removals)
	}
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		acceptType string
		additions  []*url.URL
		removals   []*url.URL
	}{acceptType, additionsCopy, removalsCopy})
	fake.recordInvocation("Update", []interface{}{acceptType, additionsCopy, removalsCopy})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(acceptType, additions, removals)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.updateReturns.result1
}

func (fake *AcceptListMgr) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *AcceptListMgr) UpdateArgsForCall(i int) (string, []*url.URL, []*url.URL) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].acceptType, fake.updateArgsForCall[i].additions, fake.updateArgsForCall[i].removals
}

func (fake *AcceptListMgr) UpdateReturns(result1 error) {
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *AcceptListMgr) UpdateReturnsOnCall(i int, result1 error) {
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *AcceptListMgr) Get(acceptType string) ([]*url.URL, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		acceptType string
	}{acceptType})
	fake.recordInvocation("Get", []interface{}{acceptType})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(acceptType)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getReturns.result1, fake.getReturns.result2
}

func (fake *AcceptListMgr) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *AcceptListMgr) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].acceptType
}

func (fake *AcceptListMgr) GetReturns(result1 []*url.URL, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 []*url.URL
		result2 error
	}{result1, result2}
}

func (fake *AcceptListMgr) GetReturnsOnCall(i int, result1 []*url.URL, result2 error) {
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 []*url.URL
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 []*url.URL
		result2 error
	}{result1, result2}
}

func (fake *AcceptListMgr) GetAll() ([]*spi.AcceptList, error) {
	fake.getAllMutex.Lock()
	ret, specificReturn := fake.getAllReturnsOnCall[len(fake.getAllArgsForCall)]
	fake.getAllArgsForCall = append(fake.getAllArgsForCall, struct{}{})
	fake.recordInvocation("GetAll", []interface{}{})
	fake.getAllMutex.Unlock()
	if fake.GetAllStub != nil {
		return fake.GetAllStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getAllReturns.result1, fake.getAllReturns.result2
}

func (fake *AcceptListMgr) GetAllCallCount() int {
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	return len(fake.getAllArgsForCall)
}

func (fake *AcceptListMgr) GetAllReturns(result1 []*spi.AcceptList, result2 error) {
	fake.GetAllStub = nil
	fake.getAllReturns = struct {
		result1 []*spi.AcceptList
		result2 error
	}{result1, result2}
}

func (fake *AcceptListMgr) GetAllReturnsOnCall(i int, result1 []*spi.AcceptList, result2 error) {
	fake.GetAllStub = nil
	if fake.getAllReturnsOnCall == nil {
		fake.getAllReturnsOnCall = make(map[int]struct {
			result1 []*spi.AcceptList
			result2 error
		})
	}
	fake.getAllReturnsOnCall[i] = struct {
		result1 []*spi.AcceptList
		result2 error
	}{result1, result2}
}

func (fake *AcceptListMgr) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *AcceptListMgr) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
