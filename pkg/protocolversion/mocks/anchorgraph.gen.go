// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/trustbloc/orb/pkg/anchor/graph"
	"github.com/trustbloc/orb/pkg/context/common"
)

type AnchorGraph struct {
	GetDidAnchorsStub        func(cid, suffix string) ([]graph.Anchor, error)
	getDidAnchorsMutex       sync.RWMutex
	getDidAnchorsArgsForCall []struct {
		cid    string
		suffix string
	}
	getDidAnchorsReturns struct {
		result1 []graph.Anchor
		result2 error
	}
	getDidAnchorsReturnsOnCall map[int]struct {
		result1 []graph.Anchor
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *AnchorGraph) GetDidAnchors(cid string, suffix string) ([]graph.Anchor, error) {
	fake.getDidAnchorsMutex.Lock()
	ret, specificReturn := fake.getDidAnchorsReturnsOnCall[len(fake.getDidAnchorsArgsForCall)]
	fake.getDidAnchorsArgsForCall = append(fake.getDidAnchorsArgsForCall, struct {
		cid    string
		suffix string
	}{cid, suffix})
	fake.recordInvocation("GetDidAnchors", []interface{}{cid, suffix})
	fake.getDidAnchorsMutex.Unlock()
	if fake.GetDidAnchorsStub != nil {
		return fake.GetDidAnchorsStub(cid, suffix)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getDidAnchorsReturns.result1, fake.getDidAnchorsReturns.result2
}

func (fake *AnchorGraph) GetDidAnchorsCallCount() int {
	fake.getDidAnchorsMutex.RLock()
	defer fake.getDidAnchorsMutex.RUnlock()
	return len(fake.getDidAnchorsArgsForCall)
}

func (fake *AnchorGraph) GetDidAnchorsArgsForCall(i int) (string, string) {
	fake.getDidAnchorsMutex.RLock()
	defer fake.getDidAnchorsMutex.RUnlock()
	return fake.getDidAnchorsArgsForCall[i].cid, fake.getDidAnchorsArgsForCall[i].suffix
}

func (fake *AnchorGraph) GetDidAnchorsReturns(result1 []graph.Anchor, result2 error) {
	fake.GetDidAnchorsStub = nil
	fake.getDidAnchorsReturns = struct {
		result1 []graph.Anchor
		result2 error
	}{result1, result2}
}

func (fake *AnchorGraph) GetDidAnchorsReturnsOnCall(i int, result1 []graph.Anchor, result2 error) {
	fake.GetDidAnchorsStub = nil
	if fake.getDidAnchorsReturnsOnCall == nil {
		fake.getDidAnchorsReturnsOnCall = make(map[int]struct {
			result1 []graph.Anchor
			result2 error
		})
	}
	fake.getDidAnchorsReturnsOnCall[i] = struct {
		result1 []graph.Anchor
		result2 error
	}{result1, result2}
}

func (fake *AnchorGraph) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getDidAnchorsMutex.RLock()
	defer fake.getDidAnchorsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *AnchorGraph) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ common.AnchorGraph = new(AnchorGraph)
