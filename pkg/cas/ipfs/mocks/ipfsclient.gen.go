// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"io"
	"sync"

	shell "github.com/ipfs/go-ipfs-api"
)

type IPFSClient struct {
	CatStub        func(path string) (io.ReadCloser, error)
	catMutex       sync.RWMutex
	catArgsForCall []struct {
		path string
	}
	catReturns struct {
		result1 io.ReadCloser
		result2 error
	}
	catReturnsOnCall map[int]struct {
		result1 io.ReadCloser
		result2 error
	}
	AddStub        func(r io.Reader, options ...shell.AddOpts) (string, error)
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		r       io.Reader
		options []shell.AddOpts
	}
	addReturns struct {
		result1 string
		result2 error
	}
	addReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *IPFSClient) Cat(path string) (io.ReadCloser, error) {
	fake.catMutex.Lock()
	ret, specificReturn := fake.catReturnsOnCall[len(fake.catArgsForCall)]
	fake.catArgsForCall = append(fake.catArgsForCall, struct {
		path string
	}{path})
	fake.recordInvocation("Cat", []interface{}{path})
	fake.catMutex.Unlock()
	if fake.CatStub != nil {
		return fake.CatStub(path)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.catReturns.result1, fake.catReturns.result2
}

func (fake *IPFSClient) CatCallCount() int {
	fake.catMutex.RLock()
	defer fake.catMutex.RUnlock()
	return len(fake.catArgsForCall)
}

func (fake *IPFSClient) CatArgsForCall(i int) string {
	fake.catMutex.RLock()
	defer fake.catMutex.RUnlock()
	return fake.catArgsForCall[i].path
}

func (fake *IPFSClient) CatReturns(result1 io.ReadCloser, result2 error) {
	fake.CatStub = nil
	fake.catReturns = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *IPFSClient) CatReturnsOnCall(i int, result1 io.ReadCloser, result2 error) {
	fake.CatStub = nil
	if fake.catReturnsOnCall == nil {
		fake.catReturnsOnCall = make(map[int]struct {
			result1 io.ReadCloser
			result2 error
		})
	}
	fake.catReturnsOnCall[i] = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *IPFSClient) Add(r io.Reader, options ...shell.AddOpts) (string, error) {
	fake.addMutex.Lock()
	ret, specificReturn := fake.addReturnsOnCall[len(fake.addArgsForCall)]
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		r       io.Reader
		options []shell.AddOpts
	}{r, options})
	fake.recordInvocation("Add", []interface{}{r, options})
	fake.addMutex.Unlock()
	if fake.AddStub != nil {
		return fake.AddStub(r, options...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.addReturns.result1, fake.addReturns.result2
}

func (fake *IPFSClient) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *IPFSClient) AddArgsForCall(i int) (io.Reader, []shell.AddOpts) {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return fake.addArgsForCall[i].r, fake.addArgsForCall[i].options
}

func (fake *IPFSClient) AddReturns(result1 string, result2 error) {
	fake.AddStub = nil
	fake.addReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *IPFSClient) AddReturnsOnCall(i int, result1 string, result2 error) {
	fake.AddStub = nil
	if fake.addReturnsOnCall == nil {
		fake.addReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.addReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *IPFSClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.catMutex.RLock()
	defer fake.catMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *IPFSClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
