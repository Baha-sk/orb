// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/trustbloc/orb/pkg/cas/extendedcasclient"
)

type CASClient struct {
	WriteStub        func(content []byte) (string, error)
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		content []byte
	}
	writeReturns struct {
		result1 string
		result2 error
	}
	writeReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ReadStub        func(address string) ([]byte, error)
	readMutex       sync.RWMutex
	readArgsForCall []struct {
		address string
	}
	readReturns struct {
		result1 []byte
		result2 error
	}
	readReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	WriteWithCIDFormatStub        func(content []byte, opts ...extendedcasclient.CIDFormatOption) (string, error)
	writeWithCIDFormatMutex       sync.RWMutex
	writeWithCIDFormatArgsForCall []struct {
		content []byte
		opts    []extendedcasclient.CIDFormatOption
	}
	writeWithCIDFormatReturns struct {
		result1 string
		result2 error
	}
	writeWithCIDFormatReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetPrimaryWriterTypeStub        func() string
	getPrimaryWriterTypeMutex       sync.RWMutex
	getPrimaryWriterTypeArgsForCall []struct{}
	getPrimaryWriterTypeReturns     struct {
		result1 string
	}
	getPrimaryWriterTypeReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CASClient) Write(content []byte) (string, error) {
	var contentCopy []byte
	if content != nil {
		contentCopy = make([]byte, len(content))
		copy(contentCopy, content)
	}
	fake.writeMutex.Lock()
	ret, specificReturn := fake.writeReturnsOnCall[len(fake.writeArgsForCall)]
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		content []byte
	}{contentCopy})
	fake.recordInvocation("Write", []interface{}{contentCopy})
	fake.writeMutex.Unlock()
	if fake.WriteStub != nil {
		return fake.WriteStub(content)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.writeReturns.result1, fake.writeReturns.result2
}

func (fake *CASClient) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *CASClient) WriteArgsForCall(i int) []byte {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return fake.writeArgsForCall[i].content
}

func (fake *CASClient) WriteReturns(result1 string, result2 error) {
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *CASClient) WriteReturnsOnCall(i int, result1 string, result2 error) {
	fake.WriteStub = nil
	if fake.writeReturnsOnCall == nil {
		fake.writeReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.writeReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *CASClient) Read(address string) ([]byte, error) {
	fake.readMutex.Lock()
	ret, specificReturn := fake.readReturnsOnCall[len(fake.readArgsForCall)]
	fake.readArgsForCall = append(fake.readArgsForCall, struct {
		address string
	}{address})
	fake.recordInvocation("Read", []interface{}{address})
	fake.readMutex.Unlock()
	if fake.ReadStub != nil {
		return fake.ReadStub(address)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.readReturns.result1, fake.readReturns.result2
}

func (fake *CASClient) ReadCallCount() int {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return len(fake.readArgsForCall)
}

func (fake *CASClient) ReadArgsForCall(i int) string {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return fake.readArgsForCall[i].address
}

func (fake *CASClient) ReadReturns(result1 []byte, result2 error) {
	fake.ReadStub = nil
	fake.readReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *CASClient) ReadReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.ReadStub = nil
	if fake.readReturnsOnCall == nil {
		fake.readReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.readReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *CASClient) WriteWithCIDFormat(content []byte, opts ...extendedcasclient.CIDFormatOption) (string, error) {
	var contentCopy []byte
	if content != nil {
		contentCopy = make([]byte, len(content))
		copy(contentCopy, content)
	}
	fake.writeWithCIDFormatMutex.Lock()
	ret, specificReturn := fake.writeWithCIDFormatReturnsOnCall[len(fake.writeWithCIDFormatArgsForCall)]
	fake.writeWithCIDFormatArgsForCall = append(fake.writeWithCIDFormatArgsForCall, struct {
		content []byte
		opts    []extendedcasclient.CIDFormatOption
	}{contentCopy, opts})
	fake.recordInvocation("WriteWithCIDFormat", []interface{}{contentCopy, opts})
	fake.writeWithCIDFormatMutex.Unlock()
	if fake.WriteWithCIDFormatStub != nil {
		return fake.WriteWithCIDFormatStub(content, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.writeWithCIDFormatReturns.result1, fake.writeWithCIDFormatReturns.result2
}

func (fake *CASClient) WriteWithCIDFormatCallCount() int {
	fake.writeWithCIDFormatMutex.RLock()
	defer fake.writeWithCIDFormatMutex.RUnlock()
	return len(fake.writeWithCIDFormatArgsForCall)
}

func (fake *CASClient) WriteWithCIDFormatArgsForCall(i int) ([]byte, []extendedcasclient.CIDFormatOption) {
	fake.writeWithCIDFormatMutex.RLock()
	defer fake.writeWithCIDFormatMutex.RUnlock()
	return fake.writeWithCIDFormatArgsForCall[i].content, fake.writeWithCIDFormatArgsForCall[i].opts
}

func (fake *CASClient) WriteWithCIDFormatReturns(result1 string, result2 error) {
	fake.WriteWithCIDFormatStub = nil
	fake.writeWithCIDFormatReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *CASClient) WriteWithCIDFormatReturnsOnCall(i int, result1 string, result2 error) {
	fake.WriteWithCIDFormatStub = nil
	if fake.writeWithCIDFormatReturnsOnCall == nil {
		fake.writeWithCIDFormatReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.writeWithCIDFormatReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *CASClient) GetPrimaryWriterType() string {
	fake.getPrimaryWriterTypeMutex.Lock()
	ret, specificReturn := fake.getPrimaryWriterTypeReturnsOnCall[len(fake.getPrimaryWriterTypeArgsForCall)]
	fake.getPrimaryWriterTypeArgsForCall = append(fake.getPrimaryWriterTypeArgsForCall, struct{}{})
	fake.recordInvocation("GetPrimaryWriterType", []interface{}{})
	fake.getPrimaryWriterTypeMutex.Unlock()
	if fake.GetPrimaryWriterTypeStub != nil {
		return fake.GetPrimaryWriterTypeStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getPrimaryWriterTypeReturns.result1
}

func (fake *CASClient) GetPrimaryWriterTypeCallCount() int {
	fake.getPrimaryWriterTypeMutex.RLock()
	defer fake.getPrimaryWriterTypeMutex.RUnlock()
	return len(fake.getPrimaryWriterTypeArgsForCall)
}

func (fake *CASClient) GetPrimaryWriterTypeReturns(result1 string) {
	fake.GetPrimaryWriterTypeStub = nil
	fake.getPrimaryWriterTypeReturns = struct {
		result1 string
	}{result1}
}

func (fake *CASClient) GetPrimaryWriterTypeReturnsOnCall(i int, result1 string) {
	fake.GetPrimaryWriterTypeStub = nil
	if fake.getPrimaryWriterTypeReturnsOnCall == nil {
		fake.getPrimaryWriterTypeReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getPrimaryWriterTypeReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *CASClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	fake.writeWithCIDFormatMutex.RLock()
	defer fake.writeWithCIDFormatMutex.RUnlock()
	fake.getPrimaryWriterTypeMutex.RLock()
	defer fake.getPrimaryWriterTypeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CASClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ extendedcasclient.Client = new(CASClient)
