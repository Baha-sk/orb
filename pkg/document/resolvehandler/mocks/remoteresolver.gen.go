// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/trustbloc/sidetree-core-go/pkg/document"
)

type RemoteResolver struct {
	ResolveDocumentFromResolutionEndpointsStub        func(string, []string) (*document.ResolutionResult, error)
	resolveDocumentFromResolutionEndpointsMutex       sync.RWMutex
	resolveDocumentFromResolutionEndpointsArgsForCall []struct {
		arg1 string
		arg2 []string
	}
	resolveDocumentFromResolutionEndpointsReturns struct {
		result1 *document.ResolutionResult
		result2 error
	}
	resolveDocumentFromResolutionEndpointsReturnsOnCall map[int]struct {
		result1 *document.ResolutionResult
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *RemoteResolver) ResolveDocumentFromResolutionEndpoints(arg1 string, arg2 []string) (*document.ResolutionResult, error) {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.resolveDocumentFromResolutionEndpointsMutex.Lock()
	ret, specificReturn := fake.resolveDocumentFromResolutionEndpointsReturnsOnCall[len(fake.resolveDocumentFromResolutionEndpointsArgsForCall)]
	fake.resolveDocumentFromResolutionEndpointsArgsForCall = append(fake.resolveDocumentFromResolutionEndpointsArgsForCall, struct {
		arg1 string
		arg2 []string
	}{arg1, arg2Copy})
	fake.recordInvocation("ResolveDocumentFromResolutionEndpoints", []interface{}{arg1, arg2Copy})
	fake.resolveDocumentFromResolutionEndpointsMutex.Unlock()
	if fake.ResolveDocumentFromResolutionEndpointsStub != nil {
		return fake.ResolveDocumentFromResolutionEndpointsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resolveDocumentFromResolutionEndpointsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *RemoteResolver) ResolveDocumentFromResolutionEndpointsCallCount() int {
	fake.resolveDocumentFromResolutionEndpointsMutex.RLock()
	defer fake.resolveDocumentFromResolutionEndpointsMutex.RUnlock()
	return len(fake.resolveDocumentFromResolutionEndpointsArgsForCall)
}

func (fake *RemoteResolver) ResolveDocumentFromResolutionEndpointsCalls(stub func(string, []string) (*document.ResolutionResult, error)) {
	fake.resolveDocumentFromResolutionEndpointsMutex.Lock()
	defer fake.resolveDocumentFromResolutionEndpointsMutex.Unlock()
	fake.ResolveDocumentFromResolutionEndpointsStub = stub
}

func (fake *RemoteResolver) ResolveDocumentFromResolutionEndpointsArgsForCall(i int) (string, []string) {
	fake.resolveDocumentFromResolutionEndpointsMutex.RLock()
	defer fake.resolveDocumentFromResolutionEndpointsMutex.RUnlock()
	argsForCall := fake.resolveDocumentFromResolutionEndpointsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *RemoteResolver) ResolveDocumentFromResolutionEndpointsReturns(result1 *document.ResolutionResult, result2 error) {
	fake.resolveDocumentFromResolutionEndpointsMutex.Lock()
	defer fake.resolveDocumentFromResolutionEndpointsMutex.Unlock()
	fake.ResolveDocumentFromResolutionEndpointsStub = nil
	fake.resolveDocumentFromResolutionEndpointsReturns = struct {
		result1 *document.ResolutionResult
		result2 error
	}{result1, result2}
}

func (fake *RemoteResolver) ResolveDocumentFromResolutionEndpointsReturnsOnCall(i int, result1 *document.ResolutionResult, result2 error) {
	fake.resolveDocumentFromResolutionEndpointsMutex.Lock()
	defer fake.resolveDocumentFromResolutionEndpointsMutex.Unlock()
	fake.ResolveDocumentFromResolutionEndpointsStub = nil
	if fake.resolveDocumentFromResolutionEndpointsReturnsOnCall == nil {
		fake.resolveDocumentFromResolutionEndpointsReturnsOnCall = make(map[int]struct {
			result1 *document.ResolutionResult
			result2 error
		})
	}
	fake.resolveDocumentFromResolutionEndpointsReturnsOnCall[i] = struct {
		result1 *document.ResolutionResult
		result2 error
	}{result1, result2}
}

func (fake *RemoteResolver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.resolveDocumentFromResolutionEndpointsMutex.RLock()
	defer fake.resolveDocumentFromResolutionEndpointsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *RemoteResolver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
